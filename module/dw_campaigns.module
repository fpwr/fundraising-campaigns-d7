<?php

define("PERM_ACCESS_DW_CAMPAIGN", 'access derby/walk pages');
define("PERM_USER_DW_CAMPAIGN", 'user Derby/Walk Campaigns module');
define("PERM_ADMIN_DW_CAMPAIGN", 'admin Derby/Walk Campaigns module');

global $dw_campaign_module_path;
$dw_campaign_module_path = drupal_get_path('module', 'dw_campaigns') . '/';
define('DW_CAMPAIGN_MODULE_PATH', $dw_campaign_module_path);

include_once($dw_campaign_module_path . 'dw_utilities.inc');
include_once($dw_campaign_module_path . 'dw_campaigns.main.inc');
include_once($dw_campaign_module_path . 'dw_campaigns.helpers.inc');
include_once($dw_campaign_module_path . 'dw_campaigns.oss.inc');
include_once($dw_campaign_module_path . 'dw_campaigns.recent.inc');
include_once($dw_campaign_module_path . 'dw_campaigns.admin_menus.inc');

global $accepted_currencies;
global $currency_processor;
include_once($dw_campaign_module_path . 'dw_campaigns_currency_multi_config.inc');


global $ignore_node_update;
$ignore_node_update = FALSE;

$debug = FALSE;

global $dw_settings;
$dw_settings = array(
    'loggedIn'  => FALSE,
    'apiKey'	=> NULL,
    'restUrl'	=> '',
    'siteKey'	=> '',
    'loginName'	=> 'admin',
    'loginPass'	=> 'adminpassword',
);


function dw_campaigns_permission() {
    return array(
        PERM_ADMIN_DW_CAMPAIGN => array(
            'title' => t('Admin of DW Pages')
        ),
        PERM_ACCESS_DW_CAMPAIGN => array(
            'title' => t('Can Access DW Pages')
        ),
        PERM_USER_DW_CAMPAIGN => array(
            'title' => t('Valid user of DW Pages')
        )
    );
}

function dw_campaigns_civicrm_rest_settings_load() {
    global $dw_settings;

    static $loaded = FALSE;

    if($loaded) {
        return;
    }


    $dw_settings['restUrl']     = variable_get('dw_campaigns_cfg_rest_url', '');
    $dw_settings['siteKey']     = variable_get('dw_campaigns_cfg_sitekey', '');
    $dw_settings['loginName']   = variable_get('dw_campaigns_cfg_loginname', '');
    $dw_settings['loginPass']   = variable_get('dw_campaigns_cfg_loginpass', '');

    $loaded = TRUE;
}

function dw_campaigns_menu() {
    $items = array();

    $items['admin/dw/contact_hosts'] = array(
        'title'                 => "DW Contact Hosts",
        'description'           => "Schedule emails to hosts",
        'page callback'         => 'dw_campaigns_admin_contact_hosts',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/dw/contact_hosts/%'] = array(
        'title'                 => "DW Contact Hosts",
        'description'           => "Schedule emails to hosts",
        'page callback'         => 'dw_campaigns_admin_contact_hosts',
        'page arguments'        => array(3),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['admin/dw/contact_hosts/%/delete'] = array(
        'title'                 => "DW Contact Hosts",
        'description'           => "Schedule emails to hosts",
        'page callback'         => 'dw_campaigns_admin_contact_hosts_delete',
        'page arguments'        => array(3),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    //$items['admin/settings/dw_campaigns_currency_setup'] = component('Currency')->get_admin_form();

    $items['admin/settings/dw_campaigns_currency_setup'] = array(
        'title'                 => "Currency",
        'description'           => "Use this to configure the way you want to handle currency.",
        'page callback'         => "drupal_get_form",
        'page arguments'        => array("dw_campaigns_currency_config"),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'file'                  => "dw_campaigns.admin_menus.inc",
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/settings/dw_campaigns_civi_setup'] = array(
        'title'                 => "DW Campaigns Civi REST Interface Configuration",
        'description'           => "Use this page to configure Civi REST interface",
        'page callback'         => 'drupal_get_form',
        'page arguments'        => array('dw_campaigns_civicrm_config'),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'file'                  => 'dw_campaigns.admin_menus.inc',
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/settings/dw_campaigns'] = array(
        'title'                 => "DW Campaigns Module Settings",
        'description'           => "Use this page to customize and configure the DW Campaigns Module",
        'page callback'         => 'drupal_get_form',
        'page arguments'        => array('dw_campaigns_settings'),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'file'                  => 'dw_campaigns.admin_menus.inc',
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/settings/dw_groups'] = array(
        'title'                 => "DW Campaigns Groupings",
        'description'           => "Use this page to Group Campaigns together",
        'page callback'         => 'dw_campaigns_groups_admin_page',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'file'                  => 'dw_campaigns.admin_menus.inc',
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/active_campaigns'] = array(
        'title'                 => "DW Active Campaigns",
        'description'           => "List of active campaigns",
        'page callback'         => 'dw_campaigns_active_campaigns',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'file'                  => 'dw_campaigns.admin_menus.inc',
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/active_campaigns/csv'] = array(
        'title'                 => 'DW Active Campaigns Csv',
        'description'           => "A csv file filled with active dw campaign data",
        'page callback'         => 'dw_campaigns_active_campaigns_csv',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'file'                  => 'dw_campaigns.admin_menus.inc',
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/dw_emails'] = array(
        'title'                 => "DW Campaigns Emails",
        'description'           => "List of raw email addresses of fundraisers",
        'page callback'         => 'dw_campaigns_reports_email',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'file'                  => 'dw_campaigns.admin_menus.inc',
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/dw_emails/csv'] = array(
        'title'                 => "DW Campaigns Emails CSV",
        'description'           => "List of raw email addresses of fundraisers output as a csv",
        'page callback'         => 'dw_campaigns_reports_email_csv',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'file'                  => 'dw_campaigns.admin_menus.inc',
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/dw_event_emails'] = array(
        'title'                 => "DW Campaigns Event Emails",
        'description'           => "List of contact name / email addresses of fundraisers, filtered by Event",
        'page callback'         => 'dw_campaigns_reports_event_emails',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'file'                  => 'dw_campaigns.admin_menus.inc',
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/dw_event_emails/%'] = array(
        'title'                 => "DW Campaigns Emails",
        'description'           => "List of email addresses by Event",
        'page callback'         => 'dw_campaigns_reports_event_emails',
        'page arguments'        => array(3),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'file'                  => 'dw_campaigns.admin_menus.inc',
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/dw_event_emails/%/csv'] = array(
        'title'                 => "DW Campaigns Emails CSV",
        'description'           => "List of email addresses by Event generated as CSV file",
        'page callback'         => 'dw_campaigns_reports_event_emails_csv',
        'page arguments'        => array(3),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'file'                  => 'dw_campaigns.admin_menus.inc',
        'type'                  => MENU_NORMAL_ITEM
    );


    $items['admin/reports/dw_event_summary'] = array(
        'title'                 => "DW Event Summary",
        'description'           => "List of Events - shows host, # or participants, donations, total raised online/offline",
        'page callback'         => 'dw_campaigns_reports_event_summary',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'file'                  => 'dw_campaigns.admin_menus.inc',
        'type'                  => MENU_CALLBACK
    );

    $items['admin/reports/dw_event_registration'] = array(
        'title'                 => "DW Event Registration",
        'description'           => "List of Event Participants",
        'page callback'         => 'dw_campaigns_reports_event_registration',
        'page arguments'        => array(3),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'file'                  => 'dw_campaigns.admin_menus.inc',
        'type'                  => MENU_NORMAL_ITEM
    );


    $items['admin/reports/dw_event_registration/%'] = array(
        'title'                 => "DW EventRegistrationSummary",
        'description'           => "List of Event Participants",
        'page callback'         => 'dw_campaigns_reports_event_registration',
        'page arguments'        => array(3),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'file'                  => 'dw_campaigns.admin_menus.inc',
        'type'                  => MENU_NORMAL_ITEM
    );





    //DW Offline Donations
    $items['admin/reports/dw_offline'] = array(
        //displays an event selection form (dw_campaigns_offline_donations_select_form), which forwards us to 'admin/reports/dw_offline/%/% on submit
        'title'                 => "DW Offline Donations",
        'description'           => "Offline Donations",
        'page callback'         => 'dw_campaigns_offline_donations',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/dw_offline/%'] = array(
        //this path seems redundant.
        'title'                 => "DW Offline Donations",
        'description'           => "Offline Donations",
        'page callback'         => 'dw_campaigns_offline_donations',
        'page arguments'        => array(3),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/dw_offline/%/%'] = array(
        //segment 3 can be 'ALL', or a node id pointing at an event, segment 4 can be 'SCREEN', or 'CSV'
        'title'                 => "DW Offline Donations",
        'description'           => "Offline Donations",
        'page callback'         => 'dw_campaigns_offline_donations',
        'page arguments'        => array(3,4),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'type'                  => MENU_NORMAL_ITEM
    );






    $items['admin/reports/dw_pcp_reports/%'] = array(
        'title'                 => "DW Campaigns PCP Reports",
        'description'           => "PCP Reports",
        'page callback'         => 'dw_campaign_pcp_report',
        'page arguments'        => array(3),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/dw_pcp_reports/%/CSV'] = array(
        'title'                 => "DW Campaigns PCP Reports",
        'description'           => "PCP Reports",
        'page callback'         => 'dw_campaign_pcp_report',
        'page arguments'        => array(3, TRUE),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/dw_show_clean_urls'] = array(
        'title'                 => "DW Campaigns Shows Friendly URL",
        'description'           => "Shows friendly URL",
        'page callback'         => 'dw_campaigns_report_show_clean_urls',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/dw_offline_reports/%'] = array(
        'title'                 => "DW Campaigns Offline Donation Reports",
        'description'           => "Offline Donation Reports",
        'page callback'         => 'dw_campaign_offline_report',
        'page arguments'        => array(3),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/dw_offline_reports/%/CSV'] = array(
        'title'                 => "DW Campaigns Offline Donation Reports",
        'description'           => "Offline Donation Reports",
        'page callback'         => 'dw_campaign_offline_report',
        'page arguments'        => array(3, TRUE),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/dw_receipts/%'] = array(
        'title'                 => "DW Campaigns Receipts",
        'description'           => "Receipt",
        'page callback'         => 'dw_campaign_receipt_report',
        'page arguments'        => array(3, TRUE),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['admin/reports/dw_receipts/%/email'] = array(
        'title'                 => "DW Campaigns Receipts Email",
        'description'           => "Receipt",
        'page callback'         => 'dw_campaign_receipt_report_email',
        'page arguments'        => array(3, TRUE),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['admin/reports/dw_receipts/%/pdf'] = array(
        'title'                 => "DW Campaigns Receipts PDF",
        'description'           => "Receipt",
        'page callback'         => 'dw_campaign_receipt_report_pdf',
        'page arguments'        => array(3, TRUE),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );





    //DW Personal Page Fundraising Totals
    $items['admin/reports/dw_pp_fundraising_total'] = array(
        'title'                 => "DW Personal Page Fundraising Totals",
        'description'           => "Includes the total fundraising amounts and contact for every fundraiser",
        'page callback'         => 'dw_campaigns_pp_fundraising_total',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'type'                  => MENU_NORMAL_ITEM
    );





    $items['admin/reports/dw_hosts_panel'] = array(
        'title'                 => "DW Campaigns Host Panel (Admin)",
        'description'           => "takes you to the page where you can see what a host can see",
        'page callback'         => 'dw_campaigns_report_host_panel',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/dw_activepages'] = array(
        'title'                 => "DW Active PCPs",
        'description'           => "Active Fundraising Campaigns",
        'page callback'         => 'dw_campaigns_reports_activepages',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/dw_activepages/%'] = array(
        'title'                 => "DW Active PCPs",
        'description'           => "Active Fundraising Campaigns",
        'page callback'         => 'dw_campaigns_reports_activepages',
        'page arguments'        => array(3),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/dw_activepages/%/csv'] = array(
        'title'                 => 'DW Active PCPs CSV',
        'description'           => 'Active Personal Campaign Pages CSV Output',
        'page callback'         => 'dw_campaigns_report_activepages_csv',
        'page arguments'        => array(3),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'type'                  => MENU_NORMAL_ITEM
    );


    $items['admin/reports/dw_hosts'] = array(
        'title'                 => "DW Hosts",
        'description'           => "List of hosts including: name, email, state/province and country grouping",
        'page callback'         => 'dw_campaigns_reports_hosts',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'file'                  => 'dw_campaigns.admin_menus.inc',
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/dw_shirtorders'] = array(
        'title'                 => "DW Shirt Orders",
        'description'           => "Shirt Orders",
        'page callback'         => 'dw_campaigns_reports_shirtorders',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'file'                  => 'dw_campaigns.admin_menus.inc',
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/dw_shirtorders/csv'] = array(
        'title'                 => "DW Shirt Orders",
        'description'           => "Shirt Orders",
        'page callback'         => 'dw_campaigns_reports_shirtorders_csv',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'file'                  => 'dw_campaigns.admin_menus.inc',
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/dw_shirtorders/%'] = array(
        'title'                 => "DW Shirt Orders",
        'description'           => "Shirt Orders",
        'page callback'         => 'dw_campaigns_reports_shirtorders',
        'page arguments'        => array(3),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'file'                  => 'dw_campaigns.admin_menus.inc',
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/dw_shirtorders/%/%'] = array(
        'title'                 => "DW Shirt Orders",
        'description'           => "Shirt Orders",
        'page callback'         => 'dw_campaigns_reports_shirtorders',
        'page arguments'        => array(3,4),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'file'                  => 'dw_campaigns.admin_menus.inc',
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/dw_eventinsurance'] = array(
        'title'                 => "DW Event Insurance",
        'description'           => "Event Insurance",
        'page callback'         => 'dw_campaigns_reports_eventinsurance',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'file'                  => 'dw_campaigns.admin_menus.inc',
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['admin/reports/dw_eventinsurance/csv'] = array(
        'title'                 => "DW Event Insurance CSV",
        'description'           => "Event Insurance Csv Output",
        'page callback'         => 'dw_campaigns_reports_eventinsurance_csv',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ADMIN_DW_CAMPAIGN),
        'file'                  => 'dw_campaigns.admin_menus.inc',
        'type'                  => MENU_NORMAL_ITEM
    );

    $items['dw'] = array(
        'title'                 => 'Fundraising',
        'page callback'         => 'dw_campaigns_homepage_goto',
        'page arguments'        => array('derby'),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'		        => MENU_CALLBACK
    );

    $items['dw/clearcache'] = array(
        'title'                 => 'Cache Cleared',
        'page callback'         => 'dw_campaigns_clear_cache',
        'page arguments'        => array(1),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/lang/%'] = array(
        'title'                 => 'Cache Cleared',
        'page callback'         => 'dw_campaigns_lang',
        'page arguments'        => array(2),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/derby'] = array(
        'title'                 => 'Derby Homepage',
        'page callback'         => 'dw_campaigns_homepage',
        'page arguments'        => array(1),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/derby/event'] = array(
        'title'                 => 'Derby Event Form',
        'page callback'         => 'dw_campaigns_event_page',
        'access arguments'      => array(PERM_USER_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/derby/start/%'] = array(
        'title'                 => 'Derby Campaign',
        'page callback'         => 'dw_campaigns_user_create_pcp_page',
        'page arguments'        => array(3),
        'access arguments'      => array(PERM_USER_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/derby/event/%'] = array(
        'title'                 => 'Derby Event Form',
        'page callback'         => 'dw_campaigns_event_page',
        'page arguments'        => array(3),
        'access arguments'      => array(PERM_USER_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/walking'] = array(
        'title'                 => 'Walking Homepage',
        'page callback'         => 'dw_campaigns_walking_homepage',
        'page arguments'        => array(1),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/walking/distance-search'] = array(
        'title'                 => 'Event Search',
        'page callback'         => 'dw_campaigns_walking_distance_search_page',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/walking/event-extended/%'] = array(
        'title'                 => 'Extended',
        'page callback'         => 'dw_campaigns_walking_event_extended_page',
        'page arguments'        => array(3),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/walking/host'] = array(
        'title'                 => 'Host an Event Request',
        'page callback'         => 'dw_campaigns_walking_host_page',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/walking/get-involved'] = array(
        'title'                 => 'Get Involved',
        'page callback'         => 'dw_campaigns_get_involved_page',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );
    $items['dw/walking/thermometer-only'] = array(
        'title'                 => 'Get Involved',
        'page callback'         => 'dw_campaigns_themometer_only',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );


    $items['dw/host/contact/%'] = array(
        'title'                 => 'Host an Event',
        'page callback'         => 'dw_campaigns_host_contact_page',
        'page arguments'        => array(3),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/walking/host/create'] = array(
        'title'                 => 'Host an Event',
        'page callback'         => 'dw_campaigns_host_event_create_page',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/walking/event_list'] = array(
        'title'                 => 'Event List',
        'page callback'         => 'dw_campaigns_walking_event_list_page',
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/walking/location/%'] = array(
        'title'                 => 'Location',
        'page callback'         => 'dw_campaigns_walking_location_page',
        'page arguments'        => array(3),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/walking/location/%/%'] = array(
        'title'                 => 'Location',
        'page callback'         => 'dw_campaigns_walking_location_page',
        'page arguments'        => array(3, 4),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/walking/start/%'] = array(
        'title'                 => 'Walking Fundraising Page',
        'page callback'         => 'dw_campaigns_user_create_pcp_page',
        'page arguments'        => array(3),
        'access arguments'      => array(PERM_USER_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/walking/create_page'] = array(
        'title'                 => 'Walking Fundraising Page',
        'page callback'         => 'dw_campaigns_user_create_pcp_page',
        'page arguments'        => array(2),
        'access arguments'      => array(PERM_USER_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );


    $items['dw/walking/topcountries'] = array(
        'title'                 => 'Top Countries',
        'page callback'         => 'dw_campaigns_top_countries_page',
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/walking/toplocations'] = array(
        'title'                 => 'Top Fundraising Events',
        'page callback'         => 'dw_campaigns_top_locations_page',
        'page arguments'        => array(2),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );



    /**
     * User registration
     */
    $items['dw/user/register'] = array(
        'title'                 => 'User Registration',
        'page callback'	        => 'dw_campaigns_user_register_page',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/user/register_oss'] = array(
        'title'                 => 'User Registration',
        'page callback'         => 'dw_campaigns_user_register_oss_page1_page',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/user/register_oss/%'] = array(
        'title'                 => 'User Registration',
        'page callback'         => 'dw_campaigns_user_register_oss_page1_page',
        'page arguments'        => array(3),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/user/register_oss_payment/%'] = array(
        'title'                 => 'Registration Payment',
        'page callback'         => 'dw_campaigns_user_register_oss_registration_payment_page',
        'page arguments'        => array(3),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/user/register_oss_payment/%/%'] = array(
    	'title'                 => 'Registration Payment',
    	'page callback'	        => 'dw_campaigns_user_register_oss_registration_payment_page',
        'page arguments'        => array(3, 4),
    	'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
    	'type'                  => MENU_CALLBACK
    );

    $items['dw/user/register_oss_pcp/%'] = array(
    	'title'                 => 'User Registration / PCP',
    	'page callback'	        => 'dw_campaigns_user_register_oss_create_pcp_page',
        'page arguments'        => array(3),
    	'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
    	'type'                  => MENU_CALLBACK
    );


    $items['dw/user/register_oss_pcp/%/%'] = array(
    	'title'                 => 'User Registration / PCP',
    	'page callback'	        => 'dw_campaigns_user_register_oss_create_pcp_page',
        'page arguments'        => array(3, 4),
    	'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
    	'type'                  => MENU_CALLBACK
    );

    $items['dw/user/register_oss_pcp/%/%/%'] = array(
    	'title'                 => 'User Registration / PCP',
    	'page callback'	        => 'dw_campaigns_user_register_oss_create_pcp_page',
        'page arguments'        => array(3, 4, 5),
    	'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
    	'type'                  => MENU_CALLBACK
    );

    $items['dw/user/profile'] = array(
        'title'                 => 'My Account',
        'page callback'         => 'dw_campaigns_user_profile',
        'access arguments'      => array(PERM_USER_DW_CAMPAIGN),
        'type'                  => MENU_LOCAL_TASK,
	    'weight'		        => 10
    );



    $items['dw/user/view_page'] = array(
        'title'                 => 'View My Page',
        'page callback'         => 'dw_campaigns_user_view_page',
        'access arguments'      => array(PERM_USER_DW_CAMPAIGN),
        'type'                  => MENU_LOCAL_TASK,
	    'weight'		        => 1
    );

    $items['dw/user/edit_page'] = array(
        'title'                 => 'Edit My Page',
        'page callback'         => 'dw_campaigns_user_edit_page',
        'access arguments'      => array(PERM_USER_DW_CAMPAIGN),
        'type'                  => MENU_LOCAL_TASK,
	    'weight'		        => 2
    );

    $items['dw/user/donations'] = array(
    	'title'                 => 'My Donations',
    	'page callback'	        => 'dw_campaigns_user_donations_page',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_USER_DW_CAMPAIGN),
    	'type'                  => MENU_LOCAL_TASK,
	    'weight'		        => 3
    );

    $items['dw/users/fundraisingTips'] = array(
        'title'                 => t('Fundraising Tips'),
        'page callback'         => 'dw_campaigns_fundraising_tips_page',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_USER_DW_CAMPAIGN),
        'type'                  => MENU_LOCAL_TASK,
        'weight'                => 15
    );

    $items['dw/user/donations/%'] = array(
    	'title'                 => 'Historical My Donations',
    	'page callback'	        => 'dw_campaigns_user_donations_page',
        'page arguments'        => array(3),
        'access arguments'      => array(PERM_USER_DW_CAMPAIGN),
    	'type'                  => MENU_CALLBACK,
	    'weight'		        => 3
    );

    $items['dw/user/send_thankyou/%/%'] = array(
    	'title'                 => 'Send Thank You',
    	'page callback'	        => 'dw_campaigns_thankyou_page',
        'page arguments'        => array(3, 4),
        'access arguments'      => array(PERM_USER_DW_CAMPAIGN),
    	'type'                  => MENU_CALLBACK,
	    'weight'		        => 3
    );

    $items['dw/user/send_thankyou/%/%/thanked'] = array(
    	'title'                 => 'Send Thank You',
    	'page callback'	        => 'dw_campaigns_thankyou_thanked',
        'page arguments'        => array(3, 4),
        'access arguments'      => array(PERM_USER_DW_CAMPAIGN),
    	'type'                  => MENU_CALLBACK,
	    'weight'		        => 3
    );

    $items['dw/user/donations/add'] = array(
    	'title'                 => 'My Donations',
    	'page callback'	        => 'dw_campaigns_user_donations_add_page_new',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_USER_DW_CAMPAIGN),
    	'type'                  => MENU_CALLBACK,
	    'weight'		        => 3
    );


    $items['dw/user/notifications'] = array(
    	'title'                 => 'Notifications',
    	'page callback'	        => 'dw_campaigns_user_notify_settings_page',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_USER_DW_CAMPAIGN),
    	'type'                  => MENU_LOCAL_TASK,
	    'weight'		        => 4
    );

    $items['dw/user/share']     = array(
    	'title'                 => 'Email/Share My Page',
    	'page callback'	        => 'dw_campaigns_user_share_page',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_USER_DW_CAMPAIGN),
    	'type'                  => MENU_LOCAL_TASK,
	    'weight'		        => 5
    );

    $items['dw/user/addressbook'] = array(
    	'title'                 => 'Address Book',
    	'page callback'	        => 'dw_campaigns_user_addressbook_page',
        'page arguments'        => array(),
        'access arguments'      => array(PERM_USER_DW_CAMPAIGN),
    	'type'                  => MENU_CALLBACK,
	    'weight'		        => 5
    );

    $items['dw/user/share/%']   = array(
    	'title'                 => 'Email/Share My Page',
    	'page callback'	        => 'dw_campaigns_user_share_page',
        'page arguments'        => array(3),
        'access arguments'      => array(PERM_USER_DW_CAMPAIGN),
    	'type'                  => MENU_CALLBACK
    );


    $items['dw/user/login']     = array(
        'title'                 => 'User Login',
        'page callback'         => 'dw_campaigns_user_login_page',
    	'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK,
    );

    $items['dw/user/created']   = array(
        'title'                 => 'User Created',
        'page callback'         => 'dw_campaigns_user_created_page',
    	'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK,
    );

    $items['dw/user/host']      = array(
        'title'                 => 'Host Management',
        'page callback'         => 'dw_campaigns_user_host_page',
    	'access callback'       => 'dw_campaigns_host_permission_check',
    	'access arguments'      => array(),
        'type'                  => MENU_LOCAL_TASK,
    );

    $items['dw/user/host/%']    = array(
        'title'                 => 'Host Management',
        'page callback'         => 'dw_campaigns_user_host_manage_page',
    	'page arguments'        => array(3),
    	'access callback'       => 'dw_campaigns_host_permission_check',
    	'access arguments'      => array(3),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/user/host/%/donors/csv'] = array(
        'title'                 => 'Host Management',
        'page callback'         => 'dw_campaigns_host_event_donors',
        'page arguments'        => array(3,5),
        'access callback'       => 'dw_campaigns_host_permission_check',
        'access arguments'      => array(3),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/user/host/%/contact_fundraisers']    = array(
        'title'                 => 'Host Management',
        'page callback'         => 'dw_campaigns_user_host_contact_fundraisers',
    	'page arguments'        => array(3),
    	'access callback'       => 'dw_campaigns_host_permission_check',
    	'access arguments'      => array(3),
        'type'                  => MENU_CALLBACK,
    );

    $items['dw/user/host/%/users']    = array(
        'title'                 => 'Host Management',
        'page callback'         => 'dw_campaigns_user_host_manage_users_page',
    	'page arguments'        => array(3),
    	'access callback'       => 'dw_campaigns_host_permission_check',
    	'access arguments'      => array(3),
        'type'                  => MENU_CALLBACK,
    );

    $items['dw/user/host/%/users/%']    = array(
        'title'                 => 'Host Management',
        'page callback'         => 'dw_campaigns_user_host_manage_users_page',
    	'page arguments'        => array(3,5),
    	'access callback'       => 'dw_campaigns_host_permission_check',
    	'access arguments'      => array(3),
        'type'                  => MENU_CALLBACK,
    );

    $items['dw/user/host/%/users/%/add'] = array(
    	'title'                 => 'My Donations',
    	'page callback'	        => 'dw_campaigns_user_donations_add_page_new_host',
    	'page arguments'        => array(3,5),
    	'access callback'       => 'dw_campaigns_host_permission_check',
    	'access arguments'      => array(3),
    	'type'                  => MENU_CALLBACK,
	'weight'		            => 3
    );

    $items['dw/user/host/%/reports/registration/%']    = array(
        'title'                 => 'Host Management',
        'page callback'         => 'dw_campaigns_host_reports_event_registration',
    	'page arguments'        => array(3, 6),
    	'access callback'       => 'dw_campaigns_host_permission_check',
    	'access arguments'      => array(3),
        'type'                  => MENU_CALLBACK,
    );

    $items['dw/user/history']      = array(
        'title'                 => 'Historical Fundraising Pages',
        'page callback'         => 'dw_campaigns_user_history_page',
    	'access callback'       => 'dw_campaigns_user_get_historical_pcps_check',
    	'access arguments'      => array(),
        'type'                  => MENU_LOCAL_TASK,
    );

    $items['dw/user/history/%']    = array(
        'title'                 => 'Historical Fundraising Page',
        'page callback'         => 'dw_campaigns_user_history_manage_page',
    	'page arguments'        => array(3),
    	'access callback'       => 'dw_campaigns_user_get_historical_pcps_check',
    	'access arguments'      => array(3),
        'type'                  => MENU_CALLBACK,
    );

    $items['dw/callback/merge'] = array(
        'title'                 => '',
        'page callback'         => 'dw_campaigns_callback_merge',
    	'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK,
    );

    $items['dw/ajax/registrationlocation/%'] = array(
        'title'                 => '',
        'page callback'         => 'dw_campaigns_get_oss_participation_type_ajax',
        'page arguments'        => array(3),
    	'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK,
    );

    $items['dw/ajax/statesQuery/%'] = array(
        'title'                 => 'User Login',
        'page callback'         => '_dw_civicrm_jq_state',
        'page arguments'        => array(3),
    	'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK,
    );


    $items['dw/ajax/username-search'] = array(
    	'title'                 => 'Username Search',
    	'page callback'         => 'dw_campaigns_username_search_ajax',
    	'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
    	'type'                  => MENU_CALLBACK
    );


    $items['dw/ajax/username-search/%'] = array(
    	'title'                 => 'Username Search',
    	'page callback'         => 'dw_campaigns_username_search_ajax',
        'page arguments'        => array(3),
    	'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
    	'type'                  => MENU_CALLBACK
    );

// TODO fix
    $items['dw/ajax/campaign-member-search-autocomplete/%/%'] = array(
    	'title'                 => 'Username Search',
    	'page callback'         => 'dw_campaigns_campaign_member_search_autocomplete',
        'page arguments'        => array(3, 4),
    	'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
    	'type'                  => MENU_CALLBACK
    );

    $items['dw/ajax/makeURL'] = array(
    	'title'                 => 'Converts a Displayname to a Personal URL',
    	'page callback'         => 'dw_campaigns_make_url',
    	'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
    	'type'                  => MENU_CALLBACK
    );

    $items['dw/ajax/makeURL/%'] = array(
    	'title'                 => 'Converts a Displayname to a Personal URL',
    	'page callback'         => 'dw_campaigns_make_url',
        'page arguments'        => array(3),
    	'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
    	'type'                  => MENU_CALLBACK
    );


    $items['dw/ajax/position/%/%'] = array(
    	'title'                 => 'Get PCP ajax position',
    	'page callback'         => 'dw_campaigns_ajax_position',
        'page arguments'        => array(3, 4),
    	'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
    	'type'                  => MENU_CALLBACK
    );

    $items['dw/ajax/currencyformat/%/%'] = array(
    	'title'                 => 'Get PCP ajax position',
    	'page callback'         => 'dw_campaigns_ajax_currencyformat',
        'page arguments'        => array(3, 4),
    	'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
    	'type'                  => MENU_CALLBACK
    );

    $items['dw/ajax/address_remove/%'] = array(
    	'title'                 => 'Get PCP ajax position',
    	'page callback'         => 'dw_campaigns_ajax_address_book_remove',
        'page arguments'        => array(3),
    	'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
    	'type'                  => MENU_CALLBACK
    );

    $items['dw/test/%'] = array(
    	'title'                 => 'Test rig',
    	'page callback'         => 'dw_campaigns_test',
        'page arguments'        => array(2),
    	'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'file'                  => 'dw_campaigns.test.inc',
    	'type'                  => MENU_CALLBACK
    );

    $items['dw/campaign/%'] = array(
        'title'                 => 'Event Landing',
        'page callback'         => 'dw_campaigns_campaign_page',
        'page arguments'        => array(2),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/campaign/%/topfundraisers'] = array(
        'title'                 => 'Event Top Fundraisers',
        'page callback'         => 'dw_campaigns_top_fundraisers_page',
        'page arguments'        => array(2),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );


    $items['dw/campaign/%/leaderboard'] = array(
        'title'                 => 'Event Leader Board',
        'page callback'         => 'dw_campaigns_campaign_leaderboard_page',
        'page arguments'        => array(2),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/campaign/%/search'] = array(
        'title'                 => 'Event Search',
        'page callback'         => 'dw_campaigns_campaign_member_search',
        'page arguments'        => array(2),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                  => MENU_CALLBACK
    );

    $items['dw/users/%/%'] = array(
        'title'               => 'Fundraising Page',
        'page callback'       => 'dw_campaigns_users_pcp_page',
        'page arguments'      => array(2, 3),
        'access arguments'    => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                => MENU_CALLBACK
    );

    $items['dw/users/%/%/donate'] = array(
        'title'               => 'Donate to Fundraiser',
        'page callback'       => 'dw_campaigns_users_donate_page',
        'page arguments'      => array(2, 3),
        'access arguments'    => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                => MENU_CALLBACK
    );

    $items['dw/users/%/%/donate_co'] = array(
        'title'               => 'Donate to Fundraiser',
        'page callback'       => 'dw_campaigns_users_donate_co_page',
        'page arguments'      => array(2, 3),
        'access arguments'    => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                => MENU_CALLBACK
    );

    $items['dw/users/%/%/donate_co/%'] = array(
        'title'               => 'Donate to Fundraiser',
        'page callback'       => 'dw_campaigns_users_donate_co_page',
        'page arguments'      => array(2, 3, 5),
        'access arguments'    => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                => MENU_CALLBACK
    );

    $items['dw/users/%/%/donated'] = array(
        'title'               => 'Thank you for donating',
        'page callback'       => 'dw_campaigns_users_donated_page',
        'page arguments'      => array(2, 3),
        'access arguments'    => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                => MENU_CALLBACK
    );

    $items['dw/users/%/%/supporters'] = array(
        'title'               => 'Donations to this Fundraiser',
        'page callback'       => 'dw_campaigns_users_supporters_page',
        'page arguments'      => array(2, 3),
        'access arguments'    => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                => MENU_CALLBACK
    );

    $items['dw/users/%/%/join'] = array(
        'title'               => 'Join the Event',
        'page callback'       => 'dw_campaigns_donor_participation_page',
        'page arguments'      => array(2, 3),
        'access arguments'    => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                => MENU_CALLBACK
    );

    $items['dw/cancel/%'] = array(
        'title'               => 'cancel',
        'page callback'       => 'dw_campaigns_form_cancel',
        'page arguments'      => array(2),
        'access arguments'    => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                => MENU_CALLBACK
    );

    $items['dw/co/pp_ipncatch'] = array(
        'title'               => 'PayPal ipn catch',
        'page callback'       => 'dw_campaigns_checkout_pp_ipncatch',
        'page arguments'      => array(),
        'access arguments'    => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                => MENU_CALLBACK
    );

    $items['dw/notfound'] = array(
        'page callback'       => 'dw_campaigns_notfound',
        'access arguments'    => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                => MENU_CALLBACK
    );

    $items['dw/contact'] = array(
        'title'                 => "Contact Form",
        'description'           => "",
        'page callback'         => 'drupal_get_form',
        'page arguments'        => array('dw_campaigns_walking_contact_block_form'),
        'access arguments'      => array(PERM_ACCESS_DW_CAMPAIGN),
        'file'                  => 'dw_campaigns.oss.inc',
        'type'                  => MENU_CALLBACK
    );

    $items['dw/offline/%/edit'] = array(
        'title'               => 'Edit Offline Donation',
        'page callback'       => 'dw_campaigns_offline_edit',
        'page arguments'      => array(2),
    	'access callback'     => 'dw_campaigns_offline_permissions',
        'access arguments'    => array(2),
        'type'                => MENU_CALLBACK
    );

    $items['dw/offline/%/delete'] = array(
        'title'               => 'Delete Offline Donation',
        'page callback'       => 'dw_campaigns_offline_delete',
        'page arguments'      => array(2),
    	'access callback'     => 'dw_campaigns_offline_permissions',
        'access arguments'    => array(2),
        'type'                => MENU_CALLBACK
    );

    $items['dw/noframe'] = array(
        'title'               => 'NoFrame',
        'page callback'       => 'dw_campaigns_noframe',
        'page arguments'      => array(),
        'access arguments'    => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                => MENU_CALLBACK
    );
    /*
    $items['finallyfull'] = array(
        'title'               => 'Finally Full',
        'page callback'       => 'dw_campaigns_finallyfull',
        'page arguments'      => array(),
        'access arguments'    => array(PERM_ACCESS_DW_CAMPAIGN),
        'type'                => MENU_CALLBACK
    );
    */
    return $items;
}

function dw_campaigns_theme() {

    return array(
// ajax
        'dw_campaigns_ajax_position' => array(
            'template'  => 'theme/dw-campaigns-ajax-position',
            'variables' => array('pcp' => NULL, 'possible' => NULL)
        ),
// reports
        'dw_campaigns_receipt_report' => array(
            'template'  => 'theme/dw-campaigns-receipt-report',
            'variables' => array('receiptData' => NULL)
        ),
        'dw_campaigns_reports_pp_fundraising_total' => array(
            'template'  => 'theme/dw-campaigns-report-pp-fundraising-total',
            'variables' => array('headers' => NULL, 'rows' => NULL, 'filename' => NULL)
        ),
// user
        'dw_campaigns_user_create_pcp_page_theme' => array(
            'template'  => 'theme/dw-campaigns-user-create-pcp-page',
            'variables' => array('campaign' => NULL, 'pcpCreateForm' => NULL)
        ),
        'dw_campaigns_user_created_page_theme' => array(
            'template'  => 'theme/dw-campaigns-user-created-page',
            'variables' => array('thisUser' => NULL)
        ),
        'dw_campaigns_user_donations_page_theme' => array(
            'template'  => 'theme/dw-campaigns-user-donations-page',
            'variables' => array('thisUser' => NULL, 'campaign' => NULL)
        ),
        'dw_campaigns_user_donations_add_theme' => array(
            'template'  => 'theme/dw-campaigns-user-donations-add',
            'variables' => array('form' => NULL)
        ),
        'dw_campaigns_user_login_page_theme' => array(
            'template'  => 'theme/dw-campaigns-user-login-page',
            'variables' => array('thisUser' => NULL)
        ),
        'dw_campaigns_user_register_page_theme' => array(
            'template'  => 'theme/dw-campaigns-user-register-page',
            'variables' => array('registerForm' => NULL)
        ),
        'dw_campaigns_user_register_oss_page1_page_theme' => array(
            'template'  => 'theme/dw-campaigns-user-register-oss-page1-page',
            'variables' => array('registerForm' => NULL)
        ),
        'dw_campaigns_user_register_oss_registration_payment_page_theme' => array(
            'template'  => 'theme/dw-campaigns-user-register-oss-registration-payment-page',
            'variables' => array('form' => NULL, 'campaignId' => NULL)
        ),
        'dw_campaigns_user_share_page_theme' => array(
            'template'  => 'theme/dw-campaigns-user-share-page',
            'variables' => array('thisUser' => NULL, 'form' => NULL, 'campaign' => NULL, 'other' => NULL, 'showEmail' => TRUE)
        ),
// users
        'dw_campaigns_users_donate_page_theme' => array(
            'template'  => 'theme/dw-campaigns-users-donate-page',
            'variables' => array('thisUser' => NULL, 'campaign' => NULL, 'pcp' => NULL)
        ),
        'dw_campaigns_users_donate_co_page_theme' => array(
            'template'  => 'theme/dw-campaigns-users-donate-co-page',
            'variables' => array('thisUser' => NULL, 'campaign' => NULL, 'pcp' => NULL)
        ),
        'dw_campaigns_users_donate_co_redir_page_theme' => array(
            'template'  => 'theme/dw-campaigns-users-donate-co-redir-page',
            'variables' => array('data' => NULL)
        ),
        'dw_campaigns_users_donated_page_theme' => array(
            'template'  => 'theme/dw-campaigns-users-donated-page',
            'variables' => array('thisUser' => NULL, 'campaign' => NULL, 'pcp' => NULL)
        ),
        'dw_campaigns_derby_event_details' => array(
            'template'  => 'theme/dw-campaigns-derby-event-details',
            'variables' => array('node' => NULL)
        ),
        'dw_campaigns_users_pcp_page_theme' => array(
            'template'  => 'theme/dw-campaigns-users-pcp-page',
            'variables' => array('thisUser' => NULL, 'campaign' => NULL, 'pcp' => NULL)
        ),
// derby specific
        'dw_campaigns_derby_event_details' => array(
            'template'  => 'theme/dw-campaigns-derby-event-details',
            'variables' => array()
        ),
        'dw_campaigns_derby_footer' => array(
            'template'  => 'theme/dw-campaigns-derby-footer',
            'variables' => array()
        ),
        'dw_campaigns_derby_header' => array(
            'template'  => 'theme/dw-campaigns-derby-header',
            'variables' => array()
        ),
        'dw_campaigns_derby_join_the_race' => array(
            'template'  => 'theme/dw-campaigns-derby-join-the-race',
            'variables' => array()
        ),
        'dw_campaigns_derby_main_navigation_bar' => array(
            'template'  => 'theme/dw-campaigns-derby-main-navigation-bar',
            'variables' => array('thisUser' => NULL)
        ),
        'dw_campaigns_derby_pcp_owner' => array(
            'template'  => 'theme/dw-campaigns-derby-pcp-owner',
            'variables' => array('thisUser' => NULL, 'campaign' => NULL, 'pcp' => NULL)
        ),
        'dw_campaigns_derby_pcp_position' => array(
            'template'  => 'theme/dw-campaigns-derby-pcp-position',
            'variables' => array('thisUser' => NULL, 'campaign' => NULL, 'pcp' => NULL)
        ),
        'dw_campaigns_derby_pcp_statistics' => array(
            'template'  => 'theme/dw-campaigns-derby-pcp-statistics',
            'variables' => array('thisUser' => NULL, 'campaign' => NULL, 'pcp' => NULL)
        ),
        'dw_campaigns_derby_pcp_supporters' => array(
            'template'  => 'theme/dw-campaigns-derby-pcp-supporters',
            'variables' => array('thisUser' => NULL, 'campaign' => NULL, 'pcp' => NULL, 'num_per_page' => NULL, 'show_return' => TRUE)
        ),
        'dw_campaigns_derby_statistics' => array(
            'template'  => 'theme/dw-campaigns-derby-statistics',
            'variables' => array('campaign' => NULL, 'terse' => FALSE)
        ),
        // this is the 'support the cause / join the race box
        'dw_campaigns_derby_support_box' => array(
            'template'  => 'theme/dw-campaigns-derby-support-box',
            'variables' => array()
        ),
        'dw_campaigns_derby_top_fundraisers' => array(
            'template'  => 'theme/dw-campaigns-derby-top-fundraisers',
            'variables' => array('campaign' => NULL, 'show_cnt' => 3)
        ),
        'dw_campaigns_campaign_leaderboard' => array(
            'template'  => 'theme/dw-campaigns-campaign-leaderboard',
            'variables' => array('campaign' => NULL, 'campaignPath' => NULL)
        ),
        'dw_campaigns_donation_live' => array(
            'template'  => 'theme/dw-campaigns-donation-live',
            'variables' => array()
        ),
// walking specific
        'dw_campaigns_event_extended' => array(
            'template'  => 'theme/dw-campaigns-event-extended',
            'variables' => array('campaign' => NULL)
        ),
        'dw_campaigns_walking_footer' => array(
            'template'  => 'theme/dw-campaigns-walking-footer',
            'variables' => array()
        ),
        'dw_campaigns_walking_header' => array(
            'template'  => 'theme/dw-campaigns-walking-header',
            'variables' => array()
        ),
        // 'walk nearest me'
        'dw_campaigns_walking_distance_search' => array(
            'template'  => 'theme/dw-campaigns-walking-distance-search',
            'variables' => array()
        ),
        'dw_campaigns_get_involved' => array(
            'template'  => 'theme/dw-campaigns-get-involved',
            'variables' => array('form' => NULL)
        ),
        'dw_campaigns_walking_host' => array(
            'template'  => 'theme/dw-campaigns-walking-host',
            'variables' => array('form' => NULL)
        ),
        'dw_campaigns_host_contact_page' => array(
            'template'  => 'theme/dw-campaigns-host-contact-page',
            'variables' => array('form' => NULL, 'host' => NULL)
        ),
        'dw_campaigns_host_event_create_page_theme' => array(
            'template'  => 'theme/dw-campaigns-host-event-create-page',
            'variables' => array('form' => NULL)
        ),
        'dw_campaigns_walking_main_navigation_bar' => array(
            'template'  => 'theme/dw-campaigns-walking-main-navigation-bar',
            'variables' => array()
        ),
        'dw_campaigns_walking_registration_payment' => array(
            'template'  => 'theme/dw-campaigns-walking-registration-payment',
            'variables' => array('form' => NULL)
        ),
        // top fundraisers
        'dw_campaigns_walking_top_fundraisers' => array(
            'template'  => 'theme/dw-campaigns-walking-top-fundraisers',
            'variables' => array('campaign' => NULL, 'show_cnt' => 3)
        ),
        // we have raised
        'dw_campaigns_walking_statistics' => array(
            'template'  => 'theme/dw-campaigns-walking-statistics',
            'variables' => array('campaign' => NULL, 'terse' => FALSE)
        ),
        // this is the 'support the cause / join the race box
        'dw_campaigns_walking_support_box' => array(
            'template'  => 'theme/dw-campaigns-walking-support-box',
            'variables' => array()
        ),
        'dw_campaigns_walking_top_countries' => array(
            'template'  => 'theme/dw-campaigns-walking-top-countries',
            'variables' => array('show_cnt' => 10)
        ),
        'dw_campaigns_walking_top_locations' => array(
            'template'  => 'theme/dw-campaigns-walking-top-locations',
            'variables' => array('show_cnt' => 10)
        ),
        // 'where the funds go'
        'dw_campaigns_walking_where_the_funds_go' => array(
            'template'  => 'theme/dw-campaigns-walking-where-the-funds-go',
            'variables' => array()
        ),
// Stuff from season 2
        'dw_campaigns_groups_admin_page' => array(
            'template'  => 'theme/dw-campaigns-groups-admin-page',
            'variables' => array('form' => NULL, 'groups_form' => NULL)
        ),
        'dw_campaigns_groups_admin_campaigns_form' => array(
            'template'          => 'theme/dw-campaigns-groups-admin-campaigns-form',
            'render element'    => 'form'
        ),
        'dw_campaigns_user_host_page_theme' => array(
            'template'  => 'theme/dw-campaigns-user-host-page',
            'variables' => array('form' => NULL)
        ),
        'dw_campaigns_user_host_manage_page_theme' => array(
            'template'  => 'theme/dw-campaigns-user-host-manage-page',
            'variables' => array('manage_form' => NULL, 'totals_form' => NULL, 'request_form' => NULL, 'reports_form' => NULL, 'totals' => NULL, 'event_id' => NULL, 'fundraisers_form' => NULL)
        ),
        'dw_campaigns_user_history_page_theme' => array(
            'template'  => 'theme/dw-campaigns-user-history-page',
            'variables' => array('form' => NULL)
        ),
        'dw_campaigns_user_history_manage_page_theme' => array(
            'template'  => 'theme/dw-campaigns-user-history-manage-page',
            'variables' => array('campaign' => NULL, 'pcp' => nULL),
        ),
        'dw_campaigns_reports_active_campaign' => array(
            'template'  => 'theme/dw-campaigns-reports-active-campaign',
            'variables' => array('campaigns' => NULL)
        ),
        'dw_campaigns_reports_campaign_offline_donations' => array(
            'template'  => 'theme/dw-campaigns-reports-campaign-offline-donations',
            'variables' => array('campaign' => NULL, 'form' => NULL, 'donations' => array(), 'selform' => NULL, 'headers' => array(), 'mode' => 'SCREEN')
        ),
        'dw_campaigns_reports_event_summary' => array(
            'template'  => 'theme/dw-campaigns-reports-event-summary',
            'variables' => array('headers' => NULL, 'rows' => NULL)
        ),


        'dw_campaigns_user_host_manage_files' => array(
            'template'  => 'theme/dw-campaigns-user-host-manage-files',
            'variables' => array('form' => NULL, 'data' => NULL)
        ),
        'dw_campaigns_reports_hosts' => array(
            'template'  => 'theme/dw-campaigns-reports-hosts',
            'variables' => array('hosts' => NULL)
        ),
        'dw_campaigns_reports_shirtorders' => array(
            'template'  => 'theme/dw-campaigns-reports-shirtorders',
            'variables' => array('rows' => NULL)
        ),
        'dw_campaigns_reports_eventinsurance' => array(
            'template'  => 'theme/dw-campaigns-reports-eventinsurance',
            'variables' => array('rows' => NULL)
        ),
        'dw_campaigns_reports_event_registration' => array(
            'template'  => 'theme/dw-campaigns-reports-event-registration',
            'variables' => array('headers' => array(), 'rows' => array(), 'form' => array())
        ),
        'dw_campaigns_reports_event_emails' => array(
            'template'  => 'theme/dw-campaigns-reports-event-emails',
            'variables' => array('headers' => array(), 'rows' => array(), 'form' => array())
        ),
        'dw_campaigns_reports_activepages' => array(
            'template'  => 'theme/dw-campaigns-reports-activepages',
            'variables' => array('selform' => NULL, 'headers' => array(), 'campaigns' => array(), 'data' => array())
        ),
        'dw_campaigns_offline_mailing_address' => array(
            'template'  => 'theme/dw-campaigns-offline-mailing-address',
            'variables' => array('campaign' => NULL)
        ),
        'dw_campaigns_walking_pcp_therm' => array(
            'template'  => 'theme/dw-campaigns-walking-pcp-therm',
            'variables' => array('thisUser' => NULL, 'campaign' => NULL, 'pcp' => NULL),
        ),
        'dw_campaigns_pcp_donate_button' => array(
            'template'  => 'theme/dw-campaigns-pcp-donate-button',
            'variables' => array('thisUser' => NULL, 'campaign' => NULL, 'pcp' => NULL),
        ),
        'dw_campaigns_walking_event_list' => array(
            'template'  => 'theme/dw-campaigns-walking-event-list',
            'variables' => array(),
        ),
        'dw_campaigns_user_host_contact_fundraisers' => array(
            'template'  => 'theme/dw-campaigns-user-host-contact-fundraisers',
            'variables' => array('form' => array(), 'campaign' => array())
        ),
        'dw_campaigns_admin_contact_hosts' => array(
            'template'  => 'theme/dw-campaigns-admin-contact-hosts',
            'variables' => array('form' => array(), 'data' => array())
        ),
        'dw_campaigns_finallyfull_page_theme' => array(
            'template'  => 'theme/dw-campaigns-finallyfull-page',
            'variables' => array()
        ),
    );
}

function dw_campaigns_block_info() {

    $blocks = array();
    $blocks[0]  = array('info' => t('DW Campaigns - Login Form'),);
    $blocks[1]  = array('info' => t('DW Campaigns - Derby Campaign Statistics'),);
    $blocks[2]  = array('info' => t('DW Campaigns - Derby Top Fundraisers'),);
    $blocks[3]  = array('info' => t('DW Campaigns - Derby Event Details'),);
    $blocks[4]  = array('info' => t('DW Campaigns - Derby Support Block '),);
    $blocks[5]  = array('info' => t('DW Campaigns - Derby Main Navigation Bar'),);
    $blocks[6]  = array('info' => t('DW Campaigns - Derby Header'),);
    $blocks[7]  = array('info' => t('DW Campaigns - Derby PCP Position'),);
    $blocks[8]  = array('info' => t('DW Campaigns - Derby PCP Statistics'),);
    $blocks[9]  = array('info' => t('DW Campaigns - Derby PCP Supporters'),);
    $blocks[10] = array('info' => t('DW Campaigns - Derby Footer'),);
    $blocks[11] = array('info' => t('DW Campaigns - Users PCP Page'),);
    $blocks[12] = array('info' => t('DW Campaigns - Users Leader Board'),); // we dont use this as a block currently
    $blocks[13] = array('info' => t('DW Campaigns - Derby Campaign Statistics (Right Column)'),);
    $blocks[14] = array('info' => t('DW Campaigns - Derby Event Details (Right column)'),);
    $blocks[15] = array('info' => t('DW Campaigns - Join the Race (only green)'),);
    $blocks[16] = array('info' => t('DW Campaigns - Derby PCP Owner'),);
    $blocks[17] = array('info' => t('DW Campaigns - Donation Live'),);

    $blocks[20] = array('info' => t('DW Campaigns - Walking Header'),);
    $blocks[21] = array('info' => t('DW Campaigns - Walking Footer'),);
    $blocks[22] = array('info' => t('DW Campaigns - Walking Walk Near Me'),);
    $blocks[23] = array('info' => t('DW Campaigns - Walking Top Fundraisers'),);
    $blocks[24] = array('info' => t('DW Campaigns - Walking Statistics (we have raised)'),);
    $blocks[25] = array('info' => t('DW Campaigns - Walking Support Block (support/join)'),);
    $blocks[26] = array('info' => t('DW Campaigns - Walking Top Locations'),);
    $blocks[27] = array('info' => t('DW Campaigns - Walking Where the Funds Go'),);
    $blocks[28] = array('info' => t('DW Campaigns - Walking Main Navigation Bar'),);
    $blocks[29] = array('info' => t('DW Campaigns - Walking Contact Form'),);

    $blocks[40] = array('info' => t('DW Campaigns - Extended Event Info'),);
    $blocks[41] = array('info' => t('DW Campaigns - Offline Mailing Address'),);
    $blocks[42] = array('info' => t('DW Campaigns - Walking PCP Thermometer (right column)'),);
    $blocks[43] = array('info' => t('DW Campaigns - Donate Button (right column)'),);

    return $blocks;
}

function dw_campaigns_block_view($delta) {
    global $user;

    $block = array();

    switch($delta) {
        //login form
        case 0:
            $block['subject']   = '';
            $block['content']   = theme('dw_campaigns_user_login_page_theme', array('thisUser' => $user));
            break;
        // Derby Campaign Statistics
        case 1:
            $campaign           = dw_campaigns_get_selected_campaign();
            if(is_null($campaign)) {

            }

            $block['subject']   = t("Derby Statistics");
            $block['content']   = theme('dw_campaigns_derby_statistics', array('campaign' => $campaign, 'terse' => FALSE));
            break;
        // homepage top fundraisers
        case 2:
            $campaign           = dw_campaigns_get_selected_campaign();
            $block['subject']   = t('Top Fundraisers');
            $block['content']   = theme('dw_campaigns_derby_top_fundraisers', array('campaign' => $campaign, 'show_cnt' => 3));
            break;
        case 3:
            $node               = variable_get('dw_campaigns_derby_default_node', NULL);
            $mode_type          = dw_campaigns_get_selected_type();
            $block['subject']   = ucfirst($mode_type) . t(' Event Details');
            $block['content']   = theme('dw_campaigns_derby_event_details', array('node' => $node));
            break;
        case 4:
            $block['subject']   = t('Derby Support Box');
            $block['content']   = theme('dw_campaigns_derby_support_box');
            break;
        case 5:
            $block['subject']   = t('Derby Main Navigation Bar');
            $block['content']   = theme('dw_campaigns_derby_main_navigation_bar', array('thisUser' => $user));
            break;
        case 6:
            $block['subject']   = t('Derby Header');
            $block['content']   = theme('dw_campaigns_derby_header');
            break;
        case 7:
            $owner_user         = dw_campaigns_get_selected_user();
            $campaign           = dw_campaigns_get_selected_campaign();
            $pcp                = dw_campaigns_get_selected_pcp();
            $block['subject']   = t('Derby PCP Position');
            $block['content']   = theme('dw_campaigns_derby_pcp_position', array('thisUser' => $owner_user, 'campaign' => $campaign, 'pcp' => $pcp));
            break;
        case 8:
            $owner_user         = dw_campaigns_get_selected_user();
            $campaign           = dw_campaigns_get_selected_campaign();
            $pcp                = dw_campaigns_get_selected_pcp();
            $block['subject']   = t('Derby PCP Statistics');
            $block['content']   = theme('dw_campaigns_derby_pcp_statistics', array('thisUser' => $owner_user, 'campaign' => $campaign, 'pcp' => $pcp));
            break;
        case 9:
            $owner_user         = dw_campaigns_get_selected_user();
            $campaign           = dw_campaigns_get_selected_campaign();
            $pcp                = dw_campaigns_get_selected_pcp();
            $block['subject']   = t('Derby PCP Supporters');
            $block['content']   = theme('dw_campaigns_derby_pcp_supporters', array('thisUser' => $owner_user, 'campaign' => $campaign, 'pcp' => $pcp, 'num_per_page' => 3));
            break;
        case 10:
            $block['subject']   = t('Derby Footer');
            $block['content']   = theme('dw_campaigns_derby_footer');
            break;

        // added this in as a block, since we may need it as one, but right now its themed from the page callback
        case 11:
            $owner_user         = dw_campaigns_get_selected_user();
            $campaign           = dw_campaigns_get_selected_campaign();
            $pcp                = dw_campaigns_get_selected_pcp();
            $block['subject']   = t('Derby Users PCP Page');
            $block['content']   = theme('dw_campaigns_users_pcp_page_theme', array('thisUser' => $owner_user, 'campaign' => $campaign, 'pcp' => $pcp));
            break;
        case 12:
            $block['subject']   = t('Leader Board');
            $block['content']   = theme('dw_campaigns_campaign_leaderboard', array('campaign' => NULL));
            break;

        case 13: // same as #1 but right column
            $campaign           = dw_campaigns_get_selected_campaign();
            if(is_null($campaign)) {

            }
            $block['subject']   = t("Statistics");
            $block['content']   = theme('dw_campaigns_derby_statistics', array('campaign' => $campaign, 'terse' => FALSE));
            break;

        case 14: // same as #3 but right column
            $node               = variable_get('dw_campaigns_derby_default_node', NULL);
            $block['subject']   = t('Event Details');
            $block['content']   = theme('dw_campaigns_derby_event_details', array('node' => $node));
            break;

        case 15:
            $block['subject']   = t('Join The Race (Green Only)');
            $block['content']   = theme('dw_campaigns_derby_join_the_race', array());
            break;

        case 16: // shown to pcp owner
            $owner_user         = dw_campaigns_get_selected_user();
            $campaign           = dw_campaigns_get_selected_campaign();
            $pcp                = dw_campaigns_get_selected_pcp();
            $block['subject']   = t('Fundraising Page Owner');
            $block['content']   = theme('dw_campaigns_derby_pcp_owner', array('thisUser' => $owner_user, 'campaign' => $campaign, 'pcp' => $pcp));
            break;
        case 17:
            $block['subject']   = t('Donation Live');
            $block['content']   = theme('dw_campaigns_donation_live');
            break;

        case 20:
            $block['subject']   = t('Walking Header');
            $block['content']   = theme('dw_campaigns_walking_header');
            break;
        case 21:
            $block['subject']   = t('Walking Footer');
            $block['content']   = theme('dw_campaigns_walking_footer');
            break;
        case 22:
            $block['subject']   = t('Walking Distance Search');
            $block['content']   = theme('dw_campaigns_walking_distance_search');
            break;
        case 23:
            $block['subject']   = t('Walking Top Fundraisers');
            $block['content']   = theme('dw_campaigns_walking_top_fundraisers', array('campaign' > NULL, 'show_cnt' => 10));
            break;
        case 24:
            $campaign = NULL;
            // TODO
            $block['subject']   = t("Walking Statistics");
            $block['content']   = theme('dw_campaigns_walking_statistics', array('campaign' => NULL, 'terse' => FALSE));
            break;
       case 25:
            $block['subject']   = t('Walking Support Box');
            $block['content']   = theme('dw_campaigns_walking_support_box');
            break;
        // homepage top fundraisers
        case 26:
            $block['subject']   = t('Walking Top Locations');
            // defaults to 5
            $block['content']   = theme('dw_campaigns_walking_top_locations');
            break;
       case 27:
            $block['subject']   = t('Walking Where the Funds Go');
            $block['content']   = theme('dw_campaigns_walking_where_the_funds_go');
            break;


        case 28:
            $block['subject']   = t('Walking Main Navigation Bar');
            $block['content']   = theme('dw_campaigns_walking_main_navigation_bar', array('thisUser' => $user));
            break;

        case 29:
            $block['subject']   = t('Walking Main Contact Form');
            $block['content']   = dw_campaigns_walking_contact_block();
            break;

        case 40:
            $campaign           = dw_campaigns_get_selected_campaign();
            $block['subject']   = t('Event Extended Information');
            $block['content']   = theme('dw_campaigns_event_extended', array('campaign' => $campaign));
            break;

        case 41:
            $campaign           = dw_campaigns_get_selected_campaign();
            $block['subject']   = t('Offline Check Mailing Address');
            $block['content']   = theme('dw_campaigns_offline_mailing_address', array('campaign' => $campaign));
            break;
        case 42:
            $owner_user         = dw_campaigns_get_selected_user();
            $campaign           = dw_campaigns_get_selected_campaign();
            $pcp                = dw_campaigns_get_selected_pcp();
            $block['subject']   = t('Walking PCP Statistics (Thermometer)');
            $block['content']   = theme('dw_campaigns_walking_pcp_therm', array('thisUser' => $owner_user, 'campaign' => $campaign, 'pcp' => $pcp));
            break;
        case 43:
            $owner_user         = dw_campaigns_get_selected_user();
            $campaign           = dw_campaigns_get_selected_campaign();
            $pcp                = dw_campaigns_get_selected_pcp();
            $block['subject']   = t('Large Donate button');
            $block['content']   = theme('dw_campaigns_pcp_donate_button', array('thisUser' => $owner_user, 'campaign' => $campaign, 'pcp' => $pcp));
            break;
    }

    return $block;

}

function dw_campaigns_form_alter(&$form, &$form_state, $form_id) {

    // remove the stupid teaser_include
    if(isset($form['body_field']['teaser_include'])) {
        $form['body_field']['teaser_include']['#access'] = FALSE;
    }


    // hijack the usual user_register and force them into ours
    if($form_id=="user_register")
    {
        drupal_goto('dw/user/register');
        return;
    }

    if($form_id=='user_pass') {
        drupal_set_title('Password Reminder');
        //'Email'
        $form['name']['#title']     = t('Username or Email address');
        $form['actions']['submit']['#value']  = t('Email new password');
    }

    if($form_id=='dw_campaigns_derby_node_form') {
        if(!isset($form_state['build_info']['args']['0']->vid)) {
            $form['field_dw_other_donations']['und']['0']['value']['#default_value']    = 0;
            $form['field_dw_fundraising_goal']['und']['0']['value']['#default_value']   = variable_get('dw_campaigns_fundraising_goal_start_value', '0');
            $form['field_dw_pcp_intro_text']['und']['0']['value']['#default_value']     = variable_get('dw_campaigns_default_pcp_intro_text', '');
            $form['field_dw_event_tos']['und']['0']['value']['#default_value']          = variable_get('dw_campaigns_walking_event_tos', '');
            $form['field_dw_bcc_receipt']['und']['0']['value']['#default_value']        = variable_get('dw_campaigns_default_bcc_receipt', '');
            $form['field_dw_cc_receipt']['und']['0']['value']['#default_value']         = variable_get('dw_campaigns_default_cc_receipt', '');
            $form['field_dw_receipt_from_email']['und']['0']['value']['#default_value'] = variable_get('dw_campaigns_default_receipt_from_email', '');
            $form['field_dw_receipt_from_name']['und']['0']['value']['#default_value']  = variable_get('dw_campaigns_default_receipt_from_name', '');
            $form['field_dw_receipt_subject']['und']['0']['value']['#default_value']    = variable_get('dw_campaigns_default_receipt_subject', '');
            $form['field_dw_receipt_text']['und']['0']['value']['#default_value']       = variable_get('dw_campaigns_default_receipt_text', '');
            $form['field_dw_thankyou_footer']['und']['0']['value']['#default_value']    = variable_get('dw_campaigns_default_thankyou_footer', '');
            $form['field_dw_thankyou_text']['und']['0']['value']['#default_value']      = variable_get('dw_campaigns_default_thankyou_text', '');
            $form['field_dw_thankyou_title']['und']['0']['value']['#default_value']     = variable_get('dw_campaigns_default_thankyou_title', '');

// we have to set these differently if we're using ckeditor - so do the textareas just incase

            $form['field_dw_pcp_intro_text']['und']['0']['#default_value']     = variable_get('dw_campaigns_default_pcp_intro_text', '');
            $form['field_dw_event_tos']['und']['0']['#default_value']          = variable_get('dw_campaigns_walking_event_tos', '');
            $form['field_dw_receipt_text']['und']['0']['#default_value']       = variable_get('dw_campaigns_default_receipt_text', '');
            $form['field_dw_thankyou_text']['und']['0']['#default_value']      = variable_get('dw_campaigns_default_thankyou_text', '');
        }
    }

    // workaround
    if($form_id=='dw_campaigns_settings') {
        $a = variable_get('dw_campaign_host_panel_message', '');

        if(isset($a['value'])) {
            $a = $a['value'];
        }

        $form['walking_specific']['dw_campaign_host_panel_message']['#default_value']       = $a;
    }
}

function dw_campaigns_rdf_namespaces() {
    return array(
        'fb' => "http://ogp.me/ns/fb#",
    );
}

function dw_campaigns_init() {
    global $dw_campaign_module_path;


    global $base_url;

    $element = array(
        '#tag' => 'meta',
        '#attributes' => array(
          "property" => "og:image",
          "content" => "http://onesmallstep.fpwr.org/sites/all/themes/dw_campaigns_walking/images/no-image.gif"
        ),
    );

    $element2 = array(
        '#tag' => 'meta',
        '#attributes' => array(
          "property" => "og:type",
          "content" => "website"
        ),
    );

    drupal_add_html_head($element,'facebook_share_image');
    drupal_add_html_head($element2,'facebook_share_type');


    // get our mode, force the theme
    $mode       = variable_get('dw_campaigns_operating_mode', 'derby');
    dw_campaigns_set_selected_type($mode);

    if(arg(0) == 'admin') {
        drupal_add_css($dw_campaign_module_path .'theme/admin.css');
        drupal_add_css("sites/all/themes/dw_campaigns_{$mode}/css/jquery.fancybox-1.3.1.css");
        drupal_add_js("sites/all/themes/dw_campaigns_{$mode}/js/jquery.fancybox-1.3.1.js");
    }

    if($_GET['q'] == 'node') {
        drupal_goto('dw');
        return;
    }
    dw_campaigns_civicrm_rest_settings_load();

    $js_file    = $dw_campaign_module_path . '/js/dw_campaigns.js';
/*
    $js         = file_get_contents($js_file);
    $max_chars  = dw_campaign_get_max_intro();
    $js_merged  = preg_replace('/__MAX_CHARS__/', $max_chars, $js);

    drupal_add_js($js_merged, 'inline');
*/

    drupal_add_js($js_file);


    if($mode == 'derby') {
        $campaign   = node_load(dw_campaigns_get_default_campaign());
        dw_campaigns_set_selected_campaign($campaign);
    }

    global $custom_theme;
    $custom_theme =  'dw_campaigns_' . $mode;

    if(   substr($_GET['q'], 0, 3) === 'dw/'
       && $_GET['q'] != 'dw/user/login'
       && $_GET['q'] != 'dw/user/register'
       && substr($_GET['q'], 0, 7) != 'dw/ajax'
       && substr($_GET['q'], 0, 19) != 'dw/walking/location'
       ) {
        $_SESSION['current_page'] = $_GET['q'];
    }

    if(isset($_SESSION['language'])) {
        global $language;
        $language = $_SESSION['language'];
    }


    if(isset($_SESSION['pop_overlay'])) {

        $a = $_SESSION['pop_overlay'];
        unset($_SESSION['pop_overlay']);

        drupal_add_js("
            (function ($) {
              $(document).ready(function(){
window.setTimeout(function() {
                $.fancybox({
                  'type' : 'iframe',
                  'href': '{$a}'
                });
}, 100);
              });
            })(jQuery);
        ",'inline');

    }

//    Example usage:
//    $_SESSION['pop_overlay'] = '/dw/users/3/mississauga/join?ajax=1';
}

function dw_campaigns_cron() {
    dw_campaigns_admin_contact_hosts_process();
    dw_campaigns_admin_generate_cdn_receipts();
    dw_campaigns_admin_grab_exchange_rate_data();
}

function dw_campaigns_homepage_goto() {
    $type = dw_campaigns_get_selected_type();
    drupal_goto('dw/' . $type);
}

function dw_campaigns_homepage($type) {
    global $user;

    $campaignId = dw_campaigns_get_default_campaign();
    $campaign   = node_load($campaignId);

    $results = dw_campaigns_user_get_pcp_for_campaign($user, $campaign);

    setcookie('forcetype', 'derby');

    return '';
}

function dw_campaigns_walking_homepage($type) {
    global $user;

    if(arg(2) != '') {
        drupal_goto('dw/walking');
        die;
    }

    dw_campaigns_set_selected_type('walking');

    setcookie('forcetype', 'walking');

    $theme = 'dw_campaigns_walking';

    global $custom_theme;
    $custom_theme = $theme;


    return '';
}

function dw_campaigns_node_insert($node) {
    dw_campaigns_node_modified($node);
}

function dw_campaigns_node_update($node) {
    global $ignore_node_update;

    if(!$ignore_node_update) {
        dw_campaigns_node_modified($node);
    }
}

function dw_campaigns_node_modified($node) {
    if($node->type == 'dw_campaigns_derby') {

        $orig_status = isset($node->original->field_dw_campaign_status['und']['0']['value']) ? $node->original->field_dw_campaign_status['und']['0']['value'] : NULL;
        $new_status = isset($node->field_dw_campaign_status['und']['0']['value']) ? $node->field_dw_campaign_status['und']['0']['value'] : NULL;

        $contributionPage = dw_campaigns_create_contribution_page_for_campaign($node);

        if($orig_status == 'pending' && $new_status == 'enabled') {
            dw_campaigns_event_status_change_pending_enabled($node);
        }
    }

    if($node->type == 'dw_campaigns_walking') {
        $contributionPage = dw_campaigns_create_contribution_page_for_campaign($node);
    }
}

function dw_campaigns_user_register_page() {
    $form = drupal_get_form('dw_campaigns_user_register_form');
    return theme('dw_campaigns_user_register_page_theme', array('registerForm' => $form));
}

function dw_campaigns_address_form_fields($contact, $include_phone = FALSE) {

    // lookup countries
    $countries = _dw_civicrm_pseudoconstant_country();
    $states = _dw_civicrm_pseudoconstant_stateprovince();

    //get the selected country from the contact or us 1228 = USA
    $countryId = ($contact['country_id'] > 0) ? $contact['country_id'] : 1228;

    $form['first_name']     = array(
        '#type'             => 'textfield',
        '#title'            => t('First Name'),
        '#default_value'    => $contact['first_name'],
        '#required'         => true
    );

    $form['last_name']      = array(
        '#type'             => 'textfield',
        '#title'            => t('Last Name'),
        '#default_value'    => $contact['last_name'],
        '#required'         => true
    );

    $form['splitter-1']     = array(
        '#type'             => 'markup',
        '#markup'           => '<div class="clear"></div>'
    );

    $form['address_1']      = array(
        '#type'             => 'textfield',
        '#title'            => t('Address 1'),
        '#default_value'    => $contact['street_address'],
        '#required'         => true
    );

    $supplemental = isset($contact['supplemental_address_1']) ? $contact['supplemental_address_1'] : '';

    $form['address_2']      = array(
        '#type'             => 'textfield',
        '#title'            => t('Address 2'),
        '#default_value'    => $supplemental,
        '#required'         => false
    );

    $form['splitter-10']    = array(
        '#type'             => 'markup',
        '#markup'           => '<div class="clear"></div>'
    );

    $form['city']	    = array(
        '#type'             => 'textfield',
        '#title'            => t('City'),
        '#default_value'    => $contact['city'],
        '#required'         => true
    );

    drupal_add_js('
        (function ($) {
          $(document).ready(function() {
            dw_campaigns.initCountrySelect("#edit-country", "#edit-state");
          });
        })(jQuery);
        ','inline');


    $form['country']        = array(
        '#type'             => 'select',
        '#title'            => t('Country'),
        '#options'          => $countries,
        '#default_value'    => $countryId,
        '#required'         => true
    );

    $form['state']          = array(
        '#type'             => 'select',
        '#title'            => t('State'),
        '#options'          => array(''=>'Select State/Province') + $states,
        '#default_value'    => $contact['state_province_id'],
        '#required'         => true
    );


    $form['postal_code']    = array(
        '#type'             => 'textfield',
        '#title'            => t('Postal Code'),
        '#default_value'    => isset($contact['postal_code']) ? $contact['postal_code'] : '',
        '#required'         => true
    );


    $form['splitter-2']     = array(
        '#type'             => 'markup',
        '#markup'           => '<div class="clear"></div>'
    );

    $form['email']	    = array(
        '#type'             => 'textfield',
        '#title'            => t('Email'),
        '#default_value'    => $contact['email'],
        '#required'         => true
    );

    if($include_phone) {

        $form['telephone']      = array(
            '#type'             => 'textfield',
            '#title'            => t('Telephone'),
            '#default_value'    => isset($contact['phone']) ? $contact['phone'] : '',
            '#required'         => true
        );
    }

    return $form;
}

/**
 * split out the username / password fields to their own function so we don't have duplicate code
 *
 */
function dw_campaigns_userpass_form_fields() {
    global $user;

    $form = array();

    $cur_host   = $_SERVER['HTTP_HOST'];

    $mode_type  = dw_campaigns_get_selected_type();

    if($user->uid > 0) {
        $form['displayname']['#default_value']  = isset($user->data['displayname']) ? $user->data['displayname'] : '';
    }

    $form['displayname']    = array(
        '#type'             => 'textfield',
        '#title'            => t('Display Name'),
        '#required'         => true,
        '#attributes'       => array('autocomplete'=>'off')
    );

    $form['displayname-description'] = array(
        '#type'             => 'markup',
        '#markup'           => '<div class="screen-name-description">' . t('This is the name displayed for your campaign on the leader board.  If you do not provide a value it defaults to first name and last initial. (For example, John Smith will display as John S.)') . '</div>'
    );

    // username == personal url
    $form['username']	    = array(
        '#type'             => 'textfield',
        '#title'            => t('Username'),
        '#required'         => true,
        '#attributes'       => array('autocomplete'=>'off'),
    );

    $form['username-description'] = array(
        '#type'             => 'markup',
        '#markup'           => '<div class="screen-name-description">' . t('Please select a unique username. This will create the link to your fundraising page') . ' (e.g. http://' . $cur_host . '/dw/users/<span class="username_insert">USERNAME</span>).</div>'
    );

    if($mode_type == 'walking') {
        $form['username-description']['#markup']    = '<div class="screen-name-description">' . t('Please select a unique username.') . '</div>';
    }


    $form['password']	    = array(
        '#type'             => 'password',
        '#title'            => t('Password'),
        '#required'         => true,
        '#attributes'       => array('autocomplete'=>'off', 'class' => array('password-field')),
        '#process'          => array('ajax_process_form'),
    );

    $form['password2']	    = array(
        '#type'             => 'password',
        '#title'            => t('Confirm Password'),
        '#required'         => true,
        '#attributes'       => array('autocomplete'=>'off', 'class' => array('password-confirm')),
        //'#process'          => array('form_process_password_confirm', 'user_form_process_password_confirm'),
        '#process'          => array('user_form_process_password_confirm'),
    );

    drupal_add_js('
        (function($) {
          $(document).ready(function() {
            $("#edit-displayname").assignPersonalURL();
            $("#edit-username").keydown(function() {
              dw_campaigns.personalTypedIn    =   true;
            });

            $("#edit-username").requireUniqueUsername();
          });
        })(jQuery);
    ', 'inline');


    return $form;
}

/**
 * Form for user registration
 */
function dw_campaigns_user_register_form($form, &$form_state, $type = 'user-photo', $resource_id = NULL, $validate_password = TRUE) {

    global $user;

    if($validate_password) {
/*
        user_form_process_password_confirm();
*/
    }

    $contact    = dw_campaigns_resolve_contact($user);

    // lookup picture
    $temp_filename='';
    $temp_file=_dw_campaigns_user_upload_photo();
    if(isset($temp_file->filepath)) {
	$temp_filename=$temp_file->filepath;
    }

    $image_params = array(
        'w'                 => 100,
        'src'               => $temp_filename
    );

    $matched_image = '';
    //get the user and drop it in for a preview
    $imageSrc = _dw_campaigns_get_photo($user,  $image_params, $type, $resource_id, $matched_image);


    $mode_type = dw_campaigns_get_selected_type();

    $form = array();
    $form['#attributes']    = array(
        'class'             => array('dw_campaigns-profile-form'),
        'enctype'           => "multipart/form-data"
    );
    if($mode_type == 'walking' && arg(2) == 'register') {
        $form['signup-heading'] = array(
            '#type'             => 'markup',
            '#markup'           => '<div class="signin-heading">' . t('If you already have an account, please <a href="/dw/user/login">Sign In</a>') . '</div>',
            '#weight'           => -10
        );
    }

    $address_form   = dw_campaigns_address_form_fields($contact, TRUE);
    $form           = array_merge($form, $address_form);

    if($mode_type == 'walking') {
        unset($form['telephone']['#required']);
    }

    if($mode_type != 'walking' || arg(2) == 'start' || arg(2) == 'edit_page') {
        $form['picture-heading'] = array(
            '#type'             => 'markup',
            '#markup'           => '<div class="profile-block"><h3 class="clear">' . t('Profile Picture') . '</h3>'
        );

        $form['user-photo-tmp'] = array(
            '#type'             => 'hidden',
            '#value'            => $temp_filename
        );

        $form['picture-preview'] = array(
            '#type'             => 'markup',
            '#markup'           => '<div id="profile-form-image-wrapper"><img src="' . $imageSrc . '" /></div>'
        );

        $form['user-photo']     = array(
            '#type'             => 'file',
            '#prefix'           => '<div class="photo-desc">',
            '#title'            => t('Photo'),
            '#attributes'       => array(
                'size'          => ''
            )
        );

        $form['picture-description'] = array(
            '#type'             => 'markup',
            '#markup'           => '<div id="profile-form-image-description">' . t('This image will be displayed on the leader board and with your personal donations.  You must select a file that ends in .jpg, .jpeg, .gif, or .png.<br>Note: The file is not uploaded until you hit "Submit" below.') . '</div></div></div>'
        );
    }

    $form['contact-heading'] = array(
        '#type'             => 'markup',
        '#markup'           => '<h3 class="clear">' . t('Contact &amp; Account Details') . '</h3>'
    );

    $form['splitter-4']     = array(
        '#type'             => 'markup',
        '#markup'           => '<div class="clear"></div>'
    );


    $form       = array_merge($form, dw_campaigns_userpass_form_fields());

    if($mode_type == 'walking' && arg(2) == 'register') {

        $found_location     = FALSE;
        $campaign           = NULL;

        $locations          = dw_campaigns_get_all_campaign_location();
        $location_string    = '';

        $selected           = dw_campaigns_get_selected_location();

        if(is_null($selected)) {
            $selected = -1;
        } else {
            if(isset($locations[$selected])) {
                $campaign       = node_load($selected);
                dw_campaigns_set_selected_campaign($campaign);
                $found_location = TRUE;
            } else {
                if($selected != 0) {
                    //echo "invalid node ($selected)";
                }
                dw_campaigns_set_selected_campaign(NULL);
            }
        }
        if(!$found_location) {
            $locations = array('0' => 'Select Location') + $locations;
        }

        $form['location'] = array(
            '#type'             => 'select',
            '#title'            => t('Location'),
            '#options'          => $locations,
            '#default_value'    => $selected,
            '#weight'           => -1,
            '#required'         => true
        );
    }

    $form['cancel'] = array(
        '#type'             => 'markup',
        '#markup'           => '<a onclick="location.replace(&quot;/dw/cancel/register&quot;); return false;" class="form-submit btn" value="Cancel" id="edit-cancel" name="op">' . t('Cancel') . '</a>'
    );

    $form['submit']         = array(
        '#type'             => 'submit',
        '#value'            => t('Submit'),
        '#attributes'       => array('class'=> array('btn'))
    );


    if($mode_type == 'walking' && arg(2) == 'register') {
	$form['submit']['#value'] = t('Next');
    }



    return $form;
}

function dw_campaigns_form_cancel($arg = NULL) {
    $target = '/dw';
    switch($arg) {
        case 'register':
            $target = '/dw';
            break;
        case 'pcp':
            $target = '/dw';
            break;
        case 'register_event':
            $target = '/dw';
            break;
        case 'notify':
            $target = '/dw';
            break;
        case 'donate':
            $target = '/dw';
            break;
    }
    drupal_goto($target);
}

/**
 * Validate user registration form
 *
 * @param array $form
 * @param array $form_state
 */
function dw_campaigns_user_register_form_validate(&$form, &$form_state) {

    $values = $form_state['values'];
    if(isset($values['location']) && $values['location'] == '0') {
        form_set_error('location',t('You must select a location'));
    }

    //double check username
    if(dw_campaigns_username_search_ajax($values['username'], FALSE) == 'found') {
        form_set_error('username',t('The username you have selected is already taken'));
        return;
    }

    //verify passwords
    if($values['password'] != $values['password2']) {
        form_set_error('password',t('Your passwords do not match, please try again'));
    }

    //check email
    if(!dw_campaigns_user_is_email_unique($values['email'])) {
        form_set_error('email',t('The email you entered was already taken.'));
    }

    if(!dw_campaigns_user_is_email_unique_civi($values['email'])) {
        form_set_error('email',t('The email you entered was already taken in civi.'));
    }

}

function dw_campaigns_user_register_email_mail($key, &$message, $params) {
    global $user;

    $language = $message['language'];

    switch($key)
    {
        case 'signup':
            $default_text   = t('Thank you for signing up');

            $body       = variable_get('dw_campaigns_signup_body', $default_text);
            $subject    = variable_get('dw_campaigns_signup_subject', $default_text);
            dw_campaigns_do_merge($body, $params);
            dw_campaigns_do_merge($subject, $params);
            $message['subject'] = $subject;
            $message['body'][] = $body;
            break;
    }
}

/**
 * Signup new user and create their civicrm profile
 *
 * @param array $form
 * @param array $form_state
 */
function dw_campaigns_user_register_form_submit(&$form, &$form_state) {
    global $user;

    //register the user in drupal
    $values                     = $form_state['values'];
    $params                     = array();
    $params['mail']             = $values['email'];
    $params['name']             = $values['username'];
    $params['pass']             = $values['password'];
    $params['roles']            = array();
    $params['status']           = 1;
    $params['data']             = array('displayname' => $values['displayname']);
    //$params['displayname']      = $values['displayname'];

    if(isset($values['location'])) {
        $params['location']     = $values['location'];
    }

    // save the user so drupals happy
    $user_      = user_save('', $params);




//    _user_mail_notify('register_no_approval_required', $user);
    $uid = user_authenticate($params['name'], $params['pass']);
    if($uid) {
        $user = user_load($uid);
    }


    //upload photo if they gave one
    if($form_state['values']['user-photo-tmp']) {
       _dw_campaigns_save_user_photo($user->uid, basename($form_state['values']['user-photo-tmp']));
    }

    //update the contact in civicrm
    // TODO
    $contact = _dw_campaigns_update_civicrm_contact($user, $values);

    _dw_save_user_to_contact_glue($user, $contact);

/*
    $homepage = variable_get('dw_campaigns_homepageurl', '');
    if(empty($homepage)) {
	$cur_host = $_SERVER['HTTP_HOST'];
        $homepage = 'http://' . $cur_host . '/dw/';
    }
*/

    $campaign = NULL;

    $type = dw_campaigns_get_selected_type();
    if($type == 'walking') {
        $campaignId =  $values['location'];
    } else {
        $campaignId = dw_campaigns_get_default_campaign();
    }

    if(!is_null($campaignId) && $campaignId != '') {
        $campaign = node_load($campaignId);
    }

// SIGNUPEMAIL
    $mail_params = dw_campaigns_get_merge_object($campaign);

    //$mail_params['user']                        = $params;
    $mail_params['contact']                     = $contact;

/*
    $mail_params['org']['name']                 = variable_get('dw_campaigns_organization_name', 'our cause');
    $mail_params['org']['name_abbreviated']     = variable_get('dw_campaigns_organization_name_abbreviated', '');
    $mail_params['org']['homepageurl']          = $homepage;
    $mail_params['org']['website']              = variable_get('dw_campaigns_organization_website', '');
*/



    $from = variable_get('dw_campaigns_signup_from', '');
    if(!empty($from)) {
        drupal_mail('dw_campaigns_user_register_email', 'signup', $user->mail, user_preferred_language($user), $mail_params, $from);
    } else {
        drupal_mail('dw_campaigns_user_register_email', 'signup', $user->mail, user_preferred_language($user), $mail_params);
    }
    // TODO

    if($type == 'walking') {
        dw_campaigns_set_selected_location($values['location']);
	//drupal_set_message('dw/walking/start/' . $values['location']);
        drupal_goto('dw/walking/start/' . $values['location']);
// MARK2
    } else {
        drupal_goto('dw/user/created');
    }
}

// TODO - fix this
function _dw_campaigns_save_user_photo($uid, $image) {

    if(empty($image)) {
        return;
    }

    $last_id = db_insert('dw_campaigns_uploaded_photos')->fields(array(
        'filepath'      => $image,
        'owner'         => $uid,
        'status'        => 1
    ))->execute();

    db_query("REPLACE INTO {dw_campaigns_photos_mapping} SET fid = :fid, type = 'user-photo', resource_id = :resourceid", array(
        ':fid'          => $last_id,
        ':resourceid'   => $uid));
}

function _dw_campaigns_save_pcp_photo($uid, $image, $pcpid) {

    if(empty($image)) {
        return;
    }

    $last_id = db_insert('dw_campaigns_uploaded_photos')->fields(array(
        'filepath'      => $image,
        'owner'         => $uid,
        'status'        => 1
    ))->execute();

    db_query("REPLACE INTO {dw_campaigns_photos_mapping} SET fid = :fid, type = 'pcp-photo', resource_id = :resourceid", array(
        ':fid'          => $last_id,
        ':resourceid'   => $pcpid));

}

function _dw_campaigns_save_donation_photo($uid, $image, $softcont_id) {

    if(empty($image)) {
        return;
    }

    if(is_null($uid)) {
        // not logged in
        $uid = -1;
    }

    $last_id = db_insert('dw_campaigns_uploaded_photos')->fields(array(
        'filepath'      => $image,
        'owner'         => $uid,
        'status'        => 1
    ))->execute();

    db_query("REPLACE INTO {dw_campaigns_photos_mapping} SET fid = :fid, type = 'donation-photo', resource_id = :resourceid", array(
        ':fid'          => $last_id,
        ':resourceid'   => $softcont_id));

}

/**
 * Gets the path to a photo for a user at specific dimensions
 * creates the user uploads directory if it doesn't exist
 */
function _dw_campaigns_get_photo($user, $params, $type='user-photo', $resource_id = NULL, &$image_picked) {
    global $dw_campaign_module_path;

    $user_uid = is_object($user) && isset($user->uid) ? $user->uid : $user;
    $image    = FALSE;

/*
    if(!isset($user_uid) || is_null($user_uid) || is_array($user_uid)) {
        return;
    }
*/
    $theme_type     = dw_campaigns_get_selected_type();
    $no_image       = 'sites/all/themes/dw_campaigns_' . $theme_type . '/images/no-image.gif';

    $upload_dir     = _dw_campaigns_get_upload_directory();

    //check if we are in the process of uploading a user photo
    if(isset($params['src']) && $params['src']) {
        $image_src = $params['src'];
        if(!file_exists($image_src)) {
            $image_src  = $upload_dir . '/users/' . $image_src;
            if(!file_exists($image_src)) {
                $image_src = $no_image;
            }
        }
    } else {
        $found=false;

        if($type != 'user-photo') {
            if(is_null($resource_id) || empty($resource_id)) {

            } else {
                $results        = db_query("SELECT b.filepath as image, b.status FROM {dw_campaigns_photos_mapping} a left join {dw_campaigns_uploaded_photos} b on a.fid = b.fid WHERE a.type = :type and a.resource_id = :resourceid", array(':type' => $type, ':resourceid' => $resource_id));
                $image = $results->fetchObject();
            }

            if($image && file_exists($upload_dir  . '/users/' . $image->image)) {
                $image_picked   = $image->image;

                $image_src      = $upload_dir . '/users/' . $image->image;
                $found          = TRUE;
            }
        }

	if(!$found) {

            if(!empty($user_uid)) {
                $results        = db_query("SELECT b.filepath as image, b.status FROM {dw_campaigns_photos_mapping} a left join {dw_campaigns_uploaded_photos} b on a.fid = b.fid WHERE a.type = 'user-photo' and a.resource_id = :resourceid", array(':resourceid' => $user_uid));
                $image = $results->fetchObject();
            }

            if(!$image || !file_exists($upload_dir  . '/users/' . $image->image)) {
                $image_src  = $no_image;
            } else {
                $image_picked   = $image->image;

                $image_src  = $upload_dir . '/users/' . $image->image;
            }
	}
    }

    //thumb the image
    $params['path'] = '/users';
    $image = _dw_campaigns_thumb($image_src, $params);

    return $image;
}

function _dw_campaigns_save_pcp_extra($pcp_id, $values) {

    $youtube_url    = isset($values['youtube_url']) ? $values['youtube_url'] : '';
    $forcephoto     = isset($values['fundraising_avatar']) ? $values['fundraising_avatar'] : 0;

    if(is_null($pcp_id)) {
        $pcp_id = 0;
    }
    db_query("replace INTO {dw_campaigns_pcp_extra} SET pcp_id = :pcpid, youtube_url = :youtubeurl, force_photo_show = :forcephoto", array(':pcpid' => $pcp_id, ':youtubeurl' => $youtube_url, ':forcephoto' => $forcephoto));
}


function _dw_campaigns_get_pcp_extra($pcp_id) {
    if(is_null($pcp_id)) {
        return NULL;
    }

    $results        = db_query("SELECT * from {dw_campaigns_pcp_extra} where pcp_id = :pcpid", array(':pcpid' => $pcp_id));
    $return         = $results->fetchObject();

    return $return;
}

function _dw_campaigns_get_upload_directory() {
    //make path to users image uploads if one does not exist
    $baseDir        = $_SERVER['DOCUMENT_ROOT'] . base_path() . variable_get('file_public_path', conf_path() . '/files');
    $moduleUploads  = $baseDir . '/dw_campaigns';

    if(!file_exists($moduleUploads)) {
        drupal_set_message('could not find upload dir @uploaddir - attempting to create', array('@uploaddir' => $moduleUploads));
        mkdir($moduleUploads);
    }

    return $moduleUploads;
}

function _dw_campaigns_user_upload_photo($directory='/users') {

    //if user failed validating the form we may have a hidden field holding the image
    if(isset($_POST['user-photo-tmp']) && $_POST['user-photo-tmp'] && empty($_FILES['files']['name']['user-photo']) ) {
	$file = new stdClass();
	$file->filepath = $_POST['user-photo-tmp'];
	return $file;
    }



    //this is a fresh file upload
    if(isset($_FILES['files']['size']['user-photo']) && $_FILES['files']['size']['user-photo'] > 0) {


        $validators = array(
            'file_validate_extensions' => array('jpg jpeg gif png')
        );


        $uploadDir  = _dw_campaigns_get_upload_directory() . $directory;
        $uploadDir = "public://dw_campaigns/$directory";

        $file       = file_save_upload('user-photo', $validators, $uploadDir);

        // this is critical - otherwise they'll be deleted when the cron runs
        $file->status |= FILE_STATUS_PERMANENT;
        file_save($file);

        //an error occured
        if($file->status == 0) {
            echo "we failed on the file!";die;
            return false;
        }

        //save the file name so it can be saved to the database in hook_submit
        //this is overridden when the form is generated in *_register_form()
        if($directory=='/contributions')
        {
            // save the record
        }

        // d7 work around
        $temp_filename = str_replace("public://", "sites/default/files/", $file->destination);
        $file->filepath = $temp_filename;

        return $file;

    }


    return false;

}


function _dw_campaigns_thumb($src, $params) {
    global $dw_campaign_module_path;

    //where we are saving the iamge
    $cacheFileName  = md5($src . ' ' . serialize($params)) . '-' . (isset($params['w'])?$params['w']:'') . 'x' . (isset($params['h'])?$params['h']:'') . '.jpg';

    $params['path'] = isset($params['path']) ? $params['path'] : '';

    $params['path'] = _dw_campaigns_get_upload_directory() . $params['path'];
    $image          = $params['path'] . '/' . $cacheFileName;

    //if the image exists skip thumb generation
    if(!file_exists($image)) {

        //create the uplaod directory if we haven't already
        if(!file_exists($params['path'])) {
            mkdir($params['path']);
        }

         //include php thumb
        require_once $dw_campaign_module_path . '/phpThumb/phpthumb.class.php';

        //setup the php thumb settings
        $phpThumb = new phpThumb();
        $phpThumb->setSourceFilename($src);

        if(isset($params['w']) && $params['w'] > 0) {
            $phpThumb->setParameter('w', $params['w']);
        }

        if(isset($params['h']) && $params['h'] > 0) {
            $phpThumb->setParameter('h', $params['h']);
        }


        $phpThumb->setParameter('config_output_format', 'jpeg');
        $phpThumb->setParameter('config_cache_directory', $dw_campaign_module_path . '/phpThumb/cache' );
        $phpThumb->setParameter('aoe',true);
        $phpThumb->setParameter('config_allow_src_above_docroot',true);
        $phpThumb->setParameter('q',100);

        $phpThumb->GenerateThumbnail();


        if(!$phpThumb->RenderToFile($image)) {
            echo "Image Thumb Failed To Render: ";
            echo implode("<br />", $phpThumb->debugmessages);
            exit;
        }

    }

    //return image path without document root so it can be dropped into the src of an iamge
    return str_replace($_SERVER['DOCUMENT_ROOT'], '', $image);
}


/**
 * This is the create pcp page form wrapper
 *
 **/

function dw_campaigns_user_create_pcp_page($campaignId) {
    global $user;

    $contactId  = _dw_campaigns_user_get_contact_id($user);

    if(is_null($contactId)) {
        drupal_set_message(t('This user does not have an existing civicrm contact record, contact tech support ') . $user->uid);
        drupal_goto('dw');
        return;
    }

    if($campaignId == 'create_page') {
        $campaignId = -1;
    }

    //get the registration form, but in simplified form
    $form = drupal_get_form('dw_campaigns_user_create_pcp_page_form', $campaignId);

    // we currently don't use campaign for anything
    $campaign = node_load($campaignId);
    return  theme('dw_campaigns_user_create_pcp_page_theme', array('campaign' => $campaign, 'pcpCreateForm' => $form));

}


function dw_campaigns_user_create_pcp_page_form($form, &$form_state, $campaignId) {
    global $user;
    $form = array();

    $mode_type = dw_campaigns_get_selected_type();
    if($mode_type != 'walking') {
        $campaign = node_load($campaignId);

        $pcp          = dw_campaigns_user_get_pcp_for_campaign($user, $campaign);
    } else {
        // if we have one, lets get fancy and look up everything for the user from this
        $pcp          = dw_campaigns_user_get_pcp_for_walking($user);

	if(is_null($pcp) || is_null($pcp->id)) {
drupal_goto('dw/user/register_oss');
die;
            // -1 means we are on a create a page which doesn't know where we are coming from
            if($campaignId != -1) {
                $campaign = node_load($campaignId);
                $pcp      = dw_campaigns_user_get_pcp_for_campaign($user, $campaign);
            } else {
                $locations          = dw_campaigns_get_all_campaign_location();

                $selected = $campaignId;

                if($selected == -1) {
                    $locations = array('0' => 'Select Location') + $locations;
                }

                $form['location'] = array(
                    '#type'             => 'select',
                    '#title'            => t('Location'),
                    '#options'          => $locations,
                    '#default_value'    => $selected,
                    '#weight'           => -1000,
                    '#required'         => true
                );
            }

// else for is_null($pcp->id)
	} else {
            $contribution_page_id   = $pcp->contribution_page_id;

            $campaigns  = dw_campaigns_get_active_campaigns(TRUE);
            $campaign   = $campaigns[$contribution_page_id];
            $campaignId = $campaign->nid;
        }
    }

    $pcp_id = (isset($pcp->id)) ? $pcp->id : NULL;

    $extra = _dw_campaigns_get_pcp_extra($pcp_id);

    if($campaignId != -1 && (is_null($campaign->nid) || !dw_campaigns_valid_type($campaign))) {
            drupal_set_message("Unable to create Fundraising Page");
            drupal_goto('dw');
            return;
    }

    if(is_null($pcp_id)) {
        $form['header-description'] = array(
            '#type'             => 'markup',
            '#markup'           => t('<h2>Create your Fundraising Page</h2><p>and support the !title</p>', array('!title' => $campaign->title)),
        );
    } else {
        $form['header-description'] = array(
            '#type'             => 'markup',
            '#markup'           => t('<h2>Edit your Fundraising Page</h2><p>and support the !title</p>', array('!title' => $campaign->title)),
        );

    }

    //drop in fields so user can fill out details about the event
    $form['campaign-details-heading'] = array(
        '#type'             => 'markup',
        '#markup'           => '<h3>' . t('Your Fundraising Page Details') . '</h3>',
    );

    if(is_null($pcp_id)) {
        $pcp = new stdClass;

        $pcp->goal_amount   = NULL;
        $pcp->intro_text    = NULL;
        $pcp->title         = NULL;
        //echo "oops, we couldn't find our fundraising page (during form)! so we should set defaults (in testing so die...)";
        //die;
    }

    $title = !empty($pcp->title)?$pcp->title:$user->data['displayname'] . "'s " . $campaign->title . ' Page';


    $form['title'] = array(
        '#type'             => 'textfield',
        '#title'            => t('Page Title'),
        '#default_value'    => $title,
        '#required'         => true
    );


    $goal_amount = variable_get('dw_campaign_default_pcp_goal', '100.00');

    if(!is_null($pcp->goal_amount)) {
        $goal_amount = $pcp->goal_amount;
    }

    $form['goal_amount'] = array(
        '#type'             => 'textfield',
        '#title'            => t('Fundraising Goal'),
        '#default_value'    => $goal_amount,
        '#required'         => true
    );



    if(1==1 || $mode_type == 'walking') {
        $form['words_used'] = array(
            '#type'             => 'markup',
            '#markup'           => '<div class="screen-name-description">' . t('Write a brief paragraph describing your motivation for participating.  This text is shown on your custom web page.') . '</div>',
        );

        $max_chars = 99999999;

    } else {

        $max_chars = dw_campaign_get_max_intro();

        $form['words_used'] = array(
            '#type'             => 'markup',
            '#markup'           => '<div class="screen-name-description">' . t('Write a brief paragraph describing your motivation for participating.  This text is shown on your custom web page.') . '</div><div class="character_counter">' . t('!chars characters used', array('!chars' => '0 / ' . $max_chars)) . '</div>',
        );

        drupal_add_js('
          (function($) {
            $(document).ready(function() {
              dw_campaigns.initIntroText(".character_counter", "#edit-intro-text");
            });
          })(jQuery);
        ','inline');
    }

    $default_intro_text = $campaign->field_dw_pcp_intro_text['und']['0']['value'];


    if(!empty($default_intro_text)) {
        $contactId      = _dw_campaigns_user_get_contact_id($user);
        $mergeObjects   = dw_campaigns_get_merge_object($campaign, NULL, $contactId);
        dw_campaigns_do_merge($default_intro_text, $mergeObjects);
    }

    $intro_text = !empty($pcp->intro_text) ? $pcp->intro_text : $default_intro_text;
    $intro_text = substr($intro_text, 0, $max_chars); // truncate




    $form['intro_text'] = array(
        '#type'             => 'text_format',
        '#title'            => 'Description',
        '#required'         => true,
        '#default_value'    => $intro_text,
        '#format'           => 1,
        '#attributes'       => array('class'=> array('intro_text'))
    );

// end 'your campaign details'

    $dummy   = array();
    $in_form = dw_campaigns_user_register_form(NULL, $dummy, 'pcp-photo', $pcp_id);

    if($mode_type != 'walking') {
        foreach($in_form as $key => $value) {

            $form[$key] = $value;

            if($key == 'picture-heading') {
                $form['fundraising_avatar'] = array(
                    '#type'             => 'select',
                    '#required'         => true,
                    '#title'            => t('I would like my fundraising page to display my'),
                    '#options'          => array('1' => 'Photo', '0' => 'Youtube Video'),
                    '#default_value'    => isset($extra->force_photo_show) ? $extra->force_photo_show : 0
                );
             }
        }

        $pre_pic = t('Defaults to Profile Image. ');

    } else {

        $form = array_merge($form, $in_form);
        $pre_pic = '';
    }

    $form['picture-heading']['#markup'] = '<h3 class="clear">' . t('Fundraising Page Picture') . '</h3>';

    unset($form['username']);
    unset($form['username-description']);
    unset($form['displayname']);
    unset($form['displayname-description']);
    unset($form['telephone']);
    unset($form['password']);
    unset($form['password2']);
    unset($form['contact-heading']);
// TODO - make this a toggle
    unset($form['first_name']);
    unset($form['last_name']);
    unset($form['address_1']);
    unset($form['address_2']);
    unset($form['city']);
    unset($form['state']);
    unset($form['postal_code']);
    unset($form['country']);

    if($mode_type == 'walking') {
        unset($form['country']);
        unset($form['email']);
        unset($form['verify-heading']);
    } else {
        unset($form['country']);
        unset($form['email']);
        unset($form['verify-heading']);
    }

    $description_words =  $pre_pic . t('You must select a file that ends in .jpg, .jpeg, .gif, or .png. Note: The file is not uploaded until you submit this page.');

    $form['user-photo']['#description'] = $description_words;

    unset($form['picture-description']);

/*
    $form['picture-description'] = array(
        '#type'             => 'markup',
        '#markup'           => '<div id="profile-form-image-description" class="form-item">' . $description_words . '</div>'
    );
*/

    $allow_youtube_on_pcp   = variable_get('dw_campaigns_allow_youtube', 1);

    if($allow_youtube_on_pcp == 1) {

        if($mode_type != 'derby') {
            $form['youtube-description'] = array(
                '#type'             => 'markup',
                '#markup'           => '<div id="youtube-description">' . t('You may supply a link to a youtube video which will be used in place of your photo on your Fundraising Page') . '</div>',
            );
        }

        $form['youtube_url'] = array(
            '#type'             => 'textfield',
            '#title'            => t('YouTube Video URL'),
            '#default_value'    => (isset($extra->youtube_url) ? $extra->youtube_url : NULL),
            '#description'      => t('To add a Youtube video, go to www.YouTube.com, click the "share" button of the video you would like to add and copy the "Link to this video".'),
            '#required'         => false
        );

        if($mode_type == 'derby') {
            $form['youtube_url']['#description'] = t('Default fundraising video provided. To change video link, go to www.YouTube.com, click the "share" button of the video you would like to add and copy the "Link to this video".');
            $form['youtube_url']['#default_value'] = isset($extra->youtube_url) ? $extra->youtube_url : variable_get('dw_campaigns_derby_youtube_default', '');
        }

    }


    if($mode_type == 'walking' && 1==2) {

        $form['event-heading'] = array(
            '#type'             => 'markup',
            '#markup'           => '<h3>' . t('Walk Registration') . '</h3>',
        );

        $event_help_text = variable_get('dw_campaigns_walking_event_help_text', '');

        $form['event-fields']['help-text'] = array(
            '#type'             => 'markup',
            '#markup'           => '<div class="screen-name-description">' . $event_help_text . '</div>',
        );

        $attending = array();

	$event_max = variable_get('dw_campaigns_walking_event_max', '6');

        for($i=0; $i<=$event_max; $i++) {
            $attending[$i] = $i;
        }


        list($children, $adults) = dw_campaigns_get_event_participants_count($campaignId, $pcp_id);

        $form['event-fields']['children'] = array(
            '#type'             => 'select',
            '#title'            => t('How many children will be attending the event'),
            '#options'          => $attending,
            '#default_value'    => $children
        );

        $form['event-fields']['adults'] = array(
            '#type'             => 'select',
            '#title'            => t('How many adults will be attending the event'),
            '#options'          => $attending,
            '#default_value'    => $adults
        );

          if(is_null($pcp_id)) {
            $tos_words = t($campaign->field_dw_event_tos['und']['0']['value']);

            $form['event-fields']['tos_words'] = array(
                '#type'             => 'markup',
                '#markup'           => '<div class="tos_words">' . $tos_words . '</div>'
            );

            $form['event-fields']['tos_checkbox'] = array(
                '#type'             => 'checkbox',
                '#description'      => t('I have read and accept these terms and conditions.')
            );
        }

    }


    $form['campaign-id'] = array(
            '#type'             => 'hidden',
            '#default_value'    => $campaignId
    );

    $form['pcp-id']      = array(
            '#type'             => 'hidden',
            '#default_value'    => $pcp_id
    );

    // TODO
    //$form['#redirect'] = "dw/user/campaigns/share/$campaignId";
    $form['cancel'] = array(
        '#type'             => 'markup',
        '#markup'           => '<a onclick="location.replace(&quot;/dw/cancel/pcp&quot;); return false;" class="form-submit btn" value="Cancel" id="edit-cancel" name="op">' . t('Cancel') . '</a>',
        '#weight'           => 998
    );

    //change label on submit button so people know they are creating a contribution page

    if($pcp_id > 0) {
        $form['submit']['#value']       = t("Update Page");

    } else {
        $form['submit']['#value']       = t("Create My Page");

        $form['submit']['#attributes']  = array('class'=> array('btn', 'form-submit', 'alert-submit'));

        drupal_add_js('
          (function($) {
            $(document).ready(function() {
              $(".alert-submit").click(function() {
                  $("#show-words").fancybox().trigger("click");
                  setTimeout("jQuery(\"#edit-submit\").attr(\"disabled\", true);", 500);
              });
            });
          })(jQuery);',
        'inline');
    }

    $form['submit']['#weight']   = 999;



    return $form;
}




/**
 * Validates the form in the create pcp page process
 *
 * @param array $form
 * @param array $form_state
 */
function dw_campaigns_user_create_pcp_page_form_validate(&$form, &$form_state) {
    global $user;

    $values = $form_state['values'];
    $mode_type   = dw_campaigns_get_selected_type();

    if(isset($values['location'])) {
        if($values['location'] == 0) {
            form_set_error('location', t('You must select a location'));
        } else {
            $form_state['values']['campaign-id'] = $values['location'];
        }
    }

    if(isset($values['tos_checkbox']) && $values['tos_checkbox'] != 1) {
        form_set_error(']event-fields][tos_checkbox', 'You must agree to the waiver');
    }

    $event_max = variable_get('dw_campaigns_walking_event_max', '6');
    if(isset($values['children']) && ($values['children'] > $event_max)) {
        form_set_error(']event-fields][children', 'Number of children exceeds max');
    }
    if(isset($values['adults']) && ($values['adults'] > $event_max)) {
        form_set_error(']event-fields][adults', 'Number of adults exceeds max');
    }

    // don't let them lie about their pcp id - this could let someone hijack someone elses pcp
    if(!empty($values['pcp-id']) && $values['pcp-id'] > 0) {
        $pcp = dw_campaigns_user_get_pcp_by_id($values['pcp-id']);
        $tmp = _dw_campaigns_contact_id_get_user($pcp->contact_id);

        if($user->uid < 1 || $user->uid != $tmp) {
            form_set_error('', 'Mismatch of user and PCP');
        }
    }

    if($mode_type == 'walking') {
        //see if they changed their email, if they did, we have to make sure it's unique
        global $user;


        // this form doesn't always have "email" set on it.
        if(isset($values['email'])) {
            if(strcasecmp($user->mail, $values['email']) != 0) {
                if(!dw_campaigns_user_is_email_unique($values['email'])) {
                    form_set_error('email',t('The email you entered was already taken.'));
                }
            }
        }
    }

    $goal_amount = preg_replace('/[^0-9\.]/', '', $values['goal_amount']);
    $form_state['values']['goal_amount'] = $goal_amount;
    if($goal_amount <= 0) {
        form_set_error('goal_amount', t('Goal amount must be > 0.00'));
    }
}

/**
 * update their user and civicrm contact, then create the personal contribution page with their
 * donation amount and welcome text
 *
 * @param array $form
 * @param array $form_state
 */

function dw_campaigns_user_create_pcp_page_form_submit(&$form, &$form_state) {

    $values = $form_state['values'];


    //update user email
    global $user;
    $action     = 'creating';
    $mode_type  = dw_campaigns_get_selected_type();

    if($mode_type != 'walking') {
        if(isset($values['email'])) {
            $account    = user_save($user, array('mail' => $values['email']));

            //update users contact in civicrm profile
            _dw_campaigns_update_civicrm_contact($account, $values);
        }
    }

    $contactId  = _dw_campaigns_user_get_contact_id($user, TRUE);

    // if we know a PCP, then this is meant to overwrite an existing record, so lets backtrack from that to find the campaign
    if($values['pcp-id'] > 0) {
        //create pcp page, update it if we already have one
        $pcp                    = dw_campaigns_user_get_pcp_by_id($values['pcp-id']);
        $contribution_page_id   = $pcp->contribution_page_id;

        $campaigns  = dw_campaigns_get_active_campaigns(TRUE);
        $campaign   = $campaigns[$contribution_page_id];

    } else {
        // we're creating a new entry, so we can (mostly) trust the campaign they want to create a campaign for
    	$campaign   = node_load($values['campaign-id']);
        $cpage      = dw_campaigns_get_contribution_page_for_campaign($campaign);
        $contribution_page_id = $cpage->id;
        $pcp        = NULL;


        $suffix = variable_get('dw_campaigns_cfg_tag_suffix', date('Y'));
        $name   = variable_get('dw_campaigns_cfg_tag_prefix', 'OSS') . ' fundraiser ' . $suffix;
        $tag_id = dw_campaigns_get_tag_id_by_name($name);
        dw_campaigns_tag_contact($tag_id, array($contactId));

    }


    $params                         = array();
    if(isset($pcp->id) && !is_null($pcp->id)) {
        $params['id']                   = $pcp->id;
        $action = 'updating';
    }

    if(is_null($contactId)) {
        drupal_set_message('Unable to look up this user', 'error');
    }

    $currency                       = $campaign->field_dw_currency['und']['0']['value'];
    if($currency == 'MULTI') {
        $currency = NULL;
    }

    // if its an array it means we have a "format", so use the "Value", otherwise handle it like a textarea
    $intro_text = is_array($values['intro_text']) ? ( isset($values['intro_text']['value']) ? $values['intro_text']['value'] : '' ) : $values['intro_text'];

    $params['contact_id']           = $contactId;
    $params['status_id']            = 2;
    $params['title']                = $values['title'];
    $params['intro_text']           = $intro_text;
    $params['goal_amount']          = $values['goal_amount'];
    $params['is_active']            = 1;
    $params['is_thermometer']       = 1;
    $params['is_honor_roll']        = 1;
    $params['contribution_page_id'] = $contribution_page_id;
    $params['pcpBlock']             = 0; // we do NOT want a pcpBlock
    $params['currency']             = $currency;

    $pcp = _dw_civicrm_pcp_create($params);


// TODO images - this uses their user image

    //save the user photo upload
    if($form_state['values']['user-photo-tmp']) {

        _dw_campaigns_save_pcp_photo($user->uid, basename($form_state['values']['user-photo-tmp']), $pcp->id);
        if($mode_type == 'walking') {
            _dw_campaigns_save_user_photo($user->uid, basename($form_state['values']['user-photo-tmp']));
        }
    }

    _dw_campaigns_save_pcp_extra($pcp->id, $form_state['values']);

    $mergeObjects   = dw_campaigns_get_merge_object($campaign, $pcp->id, $contactId);


    if($mode_type == 'walking') {
        $participants_old = dw_campaigns_get_event_participants_count($campaign->nid, $pcp->id) ;

        if(is_null($participants_old)) {
            $participants_old = 0;
        }

        if(isset($values['children'])) {
            dw_campaigns_set_event_participants_count($campaign->nid, $pcp->id, $values['children'], $values['adults'], 0);
        }


        $values['num_attending']      = (isset($values['children']) ? $values['children'] : 0) + (isset($values['adults']) ? $values['adults'] : 0);

        $event_data = new stdClass();
        $event_data->participants_old = $participants_old;
        $event_data->participants     = $values['num_attending'];
        $mergeObjects['event']        = $event_data;
    }



    // hint to go to share page
    if($action == 'creating') {
        $campaign_email = isset($campaign->field_dw_contact_email['und']['0']['value']) ? $campaign->field_dw_contact_email['und']['0']['value'] : '';

        $targets = preg_split("/[\n,;]/", $campaign_email, -1, PREG_SPLIT_NO_EMPTY);
        drupal_set_message('Thank you for creating a fundraising page.  The key to reaching your fundraising goal is sharing your personal page with as many people as possible.  <a href="/dw/user/share">Email/Share your page</a> now.', 'status');


        foreach($targets as $email) {
            $email  = trim($email);

            if(strlen($email) > 5) {
                drupal_mail('dw_campaigns_pcp_page', 'pcp-create', $email, user_preferred_language($user), $mergeObjects);
            }
        }


    } else {
        $campaign_email = isset($campaign->field_dw_contact_email['und']['0']['value']) ? $campaign->field_dw_contact_email['und']['0']['value'] : '';
        $targets = preg_split("/[\n,;]/", $campaign_email, -1, PREG_SPLIT_NO_EMPTY);
        drupal_set_message('Fundraising page updated.  Are you ready to share your campaign now? <a href="/dw/user/share">Share my Fundraising Page</a>', 'status');


        foreach($targets as $email) {
            $email  = trim($email);

            if(strlen($email) > 5) {
                // drupal_mail('dw_campaigns_pcp_page', 'pcp-update', $email, user_preferred_language($user), $mergeObjects);
            }
        }

    }


    $redir  = dw_campaigns_get_campaign_path($campaign->nid, 'dw/users/' . $user->name);
    drupal_goto($redir);
    return;
}

function dw_campaigns_pcp_page_mail($key, &$message, $params) {
    $mode_type = dw_campaigns_get_selected_type();


    // pcp-update is currently deliberately ignored, but I fire this just in case
    switch($key)
    {
        case 'pcp-create':
            $subject            = 'A new fundraising page has been created for your campaign';
            dw_campaigns_do_merge($subject, $params);

            $message['subject'] = $subject;

            if($mode_type == 'walking') {
                $body               =  variable_get('dw_campaigns_pcp_create_host_notify', 'Number of Walk Event Participants {{event}{participants}}');

                //$body               = 'Number of Walk Event Participants {{event}{participants}}';
            } else {
                $body               = '(this space intentionally left blank)';
            }
            dw_campaigns_do_merge($body, $params);
            $message['body'][]  = $body;

            break;
    }
}


function dw_campaigns_user_profile() {
    $html = '<h2 class="title">' . t('Account Information') . '</h2>';
    $html.= drupal_render(drupal_get_form('dw_campaigns_user_profile_form'));
    return $html;
}

/**
 * Form for the user profile, the same as the registration form, but with a few minor tweaks
 * @return array
 */
function dw_campaigns_user_profile_form() {

    global $user;

    $dummy  = array();
    $form   = dw_campaigns_user_register_form(array(), $dummy);

    //$form['username']['#default_value']    = $user->name;
    unset($form['username']);
    unset($form['username-description']);

    $form['displayname']['#default_value']    = isset($user->data['displayname']) ? $user->data['displayname'] : ''; // this should only not be set for "Admin"

    $form['password']['#title']            = "Password (only if changing)";
    $form['password']['#required']         = false;
    $form['password2']['#required']        = false;

    return $form;

}


function dw_campaigns_user_profile_form_validate(&$form, &$form_state) {

    global $user;

    if(isset($form_state['clicked_button']['#submit'][0]) && $form_state['clicked_button']['#submit'][0] == 'dw_campaigns_form_cancel') {
        dw_campaigns_form_cancel('profile');
        return;
    }

    //verify that if they entered a password that they match
    $values     = $form_state['values'];
    if(strlen($values['password']) > 0 && $values['password'] != $values['password2']) {
        form_set_error('password','Please make sure your passwords match');
        return;
    }

    if(strcasecmp($user->mail, $values['email']) != 0) {
        if(!dw_campaigns_user_is_email_unique($values['email'])) {
            form_set_error('email',t('The email you entered was already taken.'));
        }
    }

    // make sure we even have the username on this form
    if(isset($form['username'])) {
        //if they changed their username, verify it is unique
        if($user->name != $values['username'] && dw_campaigns_username_search_ajax($values['username'], FALSE) == 'found') {
            form_set_error('username','The username you have entered is already taken, please choose another.');
            return;
        }
    }

}

function dw_campaigns_user_profile_form_submit(&$form, &$form_state) {

    global $user;

    //register the user in drupal
    $values                 = $form_state['values'];

    $params                 = array();
    $params['mail']         = $values['email'];
    $params['data']         = array();
    $params['data']['displayname']  = $values['displayname'];

    if(isset($form['username'])) {
        $params['name']     = $values['username'];
    }

    if(strlen($values['password']) > 0) {
        $params['pass']     = $values['password'];
    }

    $user = user_save($user, $params);

    //update the contact in civicrm
    _dw_campaigns_update_civicrm_contact($user, $values);


    //save the user photo upload
    if(isset($values['user-photo-tmp'])) {
        _dw_campaigns_save_user_photo($user->uid, basename($form_state['values']['user-photo-tmp']));
    }

    drupal_set_message('Your profile has been updated');

    //drupal_goto('contributions/user');

}

function dw_campaigns_user_login_page() {
    global $user;
    $form = drupal_get_form('dw_campaigns_user_login_form');
    return theme('dw_campaigns_user_login_page_theme', array('thisUser' => $user));
}

function dw_campaigns_user_login_form() {
    $form 				= array();
    $form['name'] 	= array(
        '#type'             => 'textfield',
        '#title'            => 'Username',
        '#required'         => true,
        '#default_value'    => 'username',
        '#attributes'       => array(
            'class'         => array('text', 'has-default-text')
        )
    );

    $form['pass'] 	= array(
        '#type'             => 'password',
        '#title'            => 'Password',
        '#default_value'    => 'password',
        '#required'         => true,
        '#attributes'       => array(
            'class'         => array('text', 'has-default-text')
        )
    );

    $form['submit'] = array(
        '#type'             => 'submit',
        '#value'            => t('Log in'),
        '#weight'           => 2,
    );

    return $form;
}


function dw_campaigns_user_login_form_validate(&$form, &$form_state) {
    global $user;

    $mode_type = dw_campaigns_get_selected_type();

    if(strstr($form_state['values']['name'], '@')!==FALSE) {

        $result       = db_query("SELECT uid,name FROM {users} u WHERE mail = :email", array(':email' => $form_state['values']['name'] ));
        $temp          = $result->fetchObject();

        if(isset($temp->uid) && $temp->uid > 0) {
            $form_state['values']['name'] = $temp->name;
        }
    }

    $uid = user_authenticate($form_state['values']['name'], $form_state['values']['pass']);

    if($uid) {
        $user = user_load($uid);

        if(isset($_SESSION['current_page']) && $_SESSION['current_page'] != 'dw/walking') {
            header('Location: /dw/noframe/?destination=' . $_SESSION['current_page']);
            die;
            return;
        }
        // TODO redirect to their PCP page
        $user_campaign = dw_campaigns_get_user_pcp_details($user);

	if(!empty($user_campaign['url'])) {
           header('Location: /dw/noframe/?destination=' . $user_campaign['url']);
           die;
        }

        if($mode_type == 'walking') {
            drupal_set_message(t('You must create a donation page to complete the account creation process.  <a href="/dw/user/edit_page">Click here to create a page</a>'));
        }

        header('Location: /dw/noframe/?destination=' . 'dw/user');
        die;

    } else {
        if(!isset($_REQUEST['ajax'])) {
            form_set_error('',t('Login failed. Please try again.'));
        } else {
            form_set_error('');
            $_SESSION['last_failed'] = 1;
        }
    }
}


function dw_campaigns_walking_event_extended_page($campaign_id) {
    dw_campaigns_set_selected_location($campaign_id);

    $campaign = node_load($campaign_id);
    if(isset($campaign->field_dw_campaign_location['und']['0']['value']) && !is_null($campaign->field_dw_campaign_location['und']['0']['value'])) {
        drupal_set_title($campaign->field_dw_campaign_location['und']['0']['value']);
    }
    dw_campaigns_set_selected_campaign($campaign);

    return theme('dw_campaigns_event_extended', array('campaign' => $campaign));
}

function dw_campaigns_walking_location_page($campaign_id, $redir = FALSE) {
    $old_location = isset($_SESSION['last_location']) ? $_SESSION['last_location'] : NULL;

// TODO - if we get an invalid one, redirect...

    dw_campaigns_set_selected_location($campaign_id);

    if(($campaign_id == 0 && $redir == FALSE) || dw_campaigns_hide_campaign($campaign_id)) {
        drupal_goto('dw/walking');
        return;
    }

    $_SESSION['last_location']  = $campaign_id;

    if($redir !== FALSE) {
        $skip = false;
        if(isset($_SESSION['current_page'])) {
            if($_SESSION['current_page'] == 'dw/walking/distance-search') {
                $skip = TRUE;
            }
            if(substr($_SESSION['current_page'], -11) == 'leaderboard') {
                if(!is_null($campaign_id) && $campaign_id != 0) {
                    $path   = dw_campaigns_get_campaign_path($campaign_id, '/dw/campaign', '/leaderboard');
                    drupal_goto($path);
                } else {
                    drupal_goto('dw/campaign/current/leaderboard');
                }
                return;
            }
            if(!$skip) {
                drupal_goto($_SESSION['current_page']);
                return;
            }
        }
        drupal_goto('dw/walking');
    }

    $campaign = node_load($campaign_id);

    if(is_null($campaign) || !$campaign) {
        drupal_goto("dw");
        return;
    }

    drupal_set_title($campaign->field_dw_campaign_location['und']['0']['value']);

    dw_campaigns_set_selected_campaign($campaign);
    return '';
}

function dw_campaigns_user_created_page() {
    global $user;
    return theme('dw_campaigns_user_created_page_theme', array('thisUser' => $user));
}


function dw_campaigns_event_page($arg) {
    $form = drupal_get_form('dw_campaigns_event_form');
    return theme('dw_campaigns_user_register_page_theme', array('registerForm' => $form));
}

function dw_campaigns_event_form($form = NULL, &$form_state = NULL) {

    $uriParts = explode("/", request_uri());
    $nodeId = isset($uriParts[4]) ? $uriParts[4] : $node->nid;
    if(is_null($form)) {
        drupal_set_message('Unable to load form', 'error');
        return;
    }

    $form['node'] = array(
        '#type'             => 'hidden',
        '#value'            => $nodeId
    );

    if (isset($form_state['attendee_count'])) {
        $attendee_count = $form_state['attendee_count'];
    } else {
        $attendee_count = 5;
    }

    $form['events_wrapper'] = array(
        '#tree'         => FALSE,
        '#weight'       => -4,
        '#prefix'       => '<div class="clear-block" id="events-registration-wrapper">',
        '#suffix'       => '</div>',
    );


    $form['events_wrapper']['event'] = array(
        '#prefix'       => '<div id="attendees">',
        '#suffix'       => '</div>',
        //'#theme' => 'attendees',
    );

    // Add the current choices to the form.
    for ($delta = 0; $delta < $attendee_count; $delta++) {
        $form['events_wrapper']['event'][$delta] = dw_campaigns_event_attendee_form_row($delta, '', '');
    }

    $form['cancel'] = array(
        '#type'             => 'markup',
        '#value'            => '<a onclick="location.replace(&quot;/dw/cancel/event&quot;); return false;" class="form-submit btn" value="Cancel" id="edit-cancel" name="op">' . t('Cancel') . '</a>'
    );

    $form['submit'] = array(
        '#type'         => 'submit',
        '#value'        => t('Register For Event'),
        '#weight'       => 2,
    );

    return $form;
}


function dw_campaigns_event_attendee_form_row($delta, $value = '', $size = '') {

    $form = array(
        '#tree' => TRUE,
    );

    $sizes = array(
        'small' => 'Small',
        'large' => 'Large'
    );

    // We'll manually set the #parents property of these fields so that
    // their values appear in the $form_state['values']['choice'] array.
    $form['attendeename'] = array(
        '#type'             => 'textfield',
        '#title'            => t('Attendee Name'),
        '#default_value'    => $value,
        '#parents'          => array('event', $delta, 'attendeename'),
    );

    $form['attendeeshirt'] = array(
        '#type'             => 'select',
        '#title'            => t('Shirt Size'),
        '#options'          => array(''=>'Select Shirt Size') + $sizes,
        '#default_value'    => $size,
        '#required'         => false,
        '#parents'          => array('event', $delta, 'attendeeshirt'),
    );



    return $form;
}

function dw_campaigns_event_form_validate(&$form, &$form_state) {

    if($form_state['clicked_button']['#submit'][0] == 'dw_campaigns_form_cancel') {
        dw_campaigns_form_cancel('event');
        return;
    }

    $error = 'Both fields must be set (or unset)';

    $values = $form_state['values'];
    foreach($values['event'] as $key => $row) {
        $has_neither    = (empty($row['attendeename']) && empty($row['attendeeshirt']));
        $has_both       = (!empty($row['attendeename']) && !empty($row['attendeeshirt']));

        if(!($has_neither || $has_both)) {
            form_set_error('event][' . $key . '][attendeename', $error);
            form_set_error('event][' . $key . '][attendeeshirt', $error);
        }
    }

    $_SESSION['messages']['error'] = array_unique($_SESSION['messages']['error']);

}

function dw_campaigns_event_form_submit(&$form, &$form_state) {
    $values = $form_state['values'];

    $event = dw_campaigns_get_event_registration_for_campaign($values['node']);

    dw_campaigns_create_event_participant(NULL, $event, $params);
}

function dw_campaigns_campaign_page($campaignPath) {

    $campaignId    = dw_campaigns_campaign_get_id_from_url($campaignPath);
    $campaign       = node_load($campaignId);

    if($campaign->nid == 0) {
            drupal_goto("dw");
            // TODO - log bad hit
            return;
    }

    //set the selected campaign so blocks can access it
    dw_campaigns_set_selected_campaign($campaign);

    //set the page title
    drupal_set_title($campaign->title);

    $return = '<pre>' . print_r($campaign, TRUE) . '</pre>';

    return $return;
}
function dw_campaigns_top_fundraisers_page($campaignPath) {
    $campaign       = NULL;

    $type = dw_campaigns_get_selected_type();

    if($campaignPath != 'current') {
        $campaignId    = dw_campaigns_campaign_get_id_from_url($campaignPath);
        $campaign      = node_load($campaignId);

        if($campaign->nid == 0) {
                drupal_goto("dw");
                // TODO - log bad hit
                return;
        }
    } else {
        // TODO - we may need to do something special for 'current'
        $campaign       = dw_campaigns_get_selected_campaign();
    }

    //set the selected campaign so blocks can access it
    dw_campaigns_set_selected_campaign($campaign);

    if($type == 'derby') {
        return theme('dw_campaigns_derby_top_fundraisers', array('campaign' => $campaign, 'show_cnt' => 99999));
    } else {
        return theme('dw_campaigns_walking_top_fundraisers', array('campaign' => $campaign, 'show_cnt' => 99999));
    }
}

function dw_campaigns_top_locations_page($campaignPath) {

    $type = dw_campaigns_get_selected_type();
    if($type!='walking') {
    }

    return theme('dw_campaigns_walking_top_locations', array('show_cnt' => 99999));

}


function dw_campaigns_top_countries_page() {

    $type = dw_campaigns_get_selected_type();
    if($type!='walking') {
    }

    return theme('dw_campaigns_walking_top_countries', array('show_cnt' => 99999));

}

function dw_campaigns_campaign_leaderboard_page($campaignPath) {
    $campaign = NULL;
    $type = dw_campaigns_get_selected_type();

    if($campaignPath == 'current' || $campaignPath == 'legacy') {
        // current will do all active campaigns
    } else {
        $campaignId    = dw_campaigns_campaign_get_id_from_url($campaignPath);
        $campaign       = node_load($campaignId);

        if(!$campaign || $campaign->nid == 0) {
                drupal_goto("dw");
                // TODO - log bad hit
                return;
        }
    }
    //set the selected campaign so blocks can access it
    dw_campaigns_set_selected_campaign($campaign);

    return theme('dw_campaigns_campaign_leaderboard', array('campaign' => $campaign, 'campaignPath' => $campaignPath));
}

function dw_campaigns_users_pcp_page($username, $campaignPath, $returnEarly = FALSE) {

    $campaignId    = dw_campaigns_campaign_get_id_from_url($campaignPath);
    $campaign       = node_load($campaignId);

    if(!is_object($campaign) || $campaign->nid == 0) {
            drupal_goto("dw");
            // TODO - log bad hit
            return;
    }

    //set the selected campaign so blocks can access it
    dw_campaigns_set_selected_campaign($campaign);

    // lookup the user
    $result = db_query("select uid from {users} where name = :name", array(':name' => $username));
    $row    = $result->fetchObject();

    if(!isset($row->uid)) {
            watchdog("users_pcp_page", "Unknown Username: " . $username);
            drupal_goto("dw");
            // TODO - log bad hit
            return;
    }

    $owner_user = user_load($row->uid);
    dw_campaigns_set_selected_user($owner_user);


    $pcp        = dw_campaigns_user_get_pcp_for_campaign($owner_user, $campaign);

    if(is_null($pcp) || $pcp->id == 0) {
            drupal_goto("dw");
            // TODO - log bad hit
            return;
    }

    dw_campaigns_set_selected_pcp($pcp);

    drupal_set_title($pcp->title);

    if($returnEarly) {
        $ret = array('owner_user' => $owner_user, 'campaign' => $campaign, 'pcp' => $pcp);
        return $ret;
    }

    return '';


}



// this is the page for entering a donation
function dw_campaigns_users_donate_page($username, $campaignPath) {
//return "donations are currently disabled";

    if($campaignPath == 'frtest2012') {
        drupal_goto('dw/users/' . $username . '/' . $campaignPath . '/donate_co');
    }

    $data = dw_campaigns_users_pcp_page($username, $campaignPath, true);
    extract($data);

    drupal_set_title($pcp->title);

    //JFN - january 20 2014 0827 - [#change "remove the donor rsvp popup"]
    //$_SESSION['donate_page_redir']    = 'dw/users/' . arg(2) . '/' . arg(3) . '/join';

    return theme('dw_campaigns_users_donate_page_theme', array('thisUser' => $owner_user, 'campaign' => $campaign, 'pcp' => $pcp));
}

// this is the page we show after they have donated
function dw_campaigns_users_donated_page($username, $campaignPath) {

    $data = dw_campaigns_users_pcp_page($username, $campaignPath, true);
    extract($data);

    drupal_set_title($pcp->title);

    return theme('dw_campaigns_users_donated_page_theme', array('thisUser' => $owner_user, 'campaign' => $campaign, 'pcp' => $pcp));
}

function dw_campaigns_users_supporters_page($username, $campaignPath) {

    $data = dw_campaigns_users_pcp_page($username, $campaignPath, true);
    extract($data);

    drupal_set_title($pcp->title . " Supporters");

    return theme('dw_campaigns_derby_pcp_supporters', array('thisUser' => $owner_user, 'campaign' => $campaign, 'pcp' => $pcp, 'num_per_page' => 20));
}

function dw_campaigns_user_get_notify_settings($uid) {
    $res    = db_query("select * from dw_campaigns_user_notify_settings where drupal_id = :uid", array(':uid' => $uid));
    $return = (array)$res->fetchAssoc();

    // if we have no record, lets set the defaults
    if(!$return) {
        $return = dw_campaigns_user_set_notify_settings($uid, array());
    }

    return $return;
}

function dw_campaigns_user_set_notify_settings($uid, $n) {

    // these are our defaults, so we should probably call this when we create a user =)
    $r['notify_on_donation']                    = 1;
    $r['notify_on_donation_additional_emails']  = '';
    $r['notify_weekly_report']                  = 1;
    $r['notify_campaign_progress']              = 1;

    foreach($n as $key => $value) {
        if($key == 'notify_on_donation_additional_emails') {
            $r['notify_on_donation_additional_emails'] = $value;
        } elseif (isset($r[$key])) {
            $r[$key] = ($value) ? 1 : 0;
        }
    }

    $res    = db_query("REPLACE into dw_campaigns_user_notify_settings (drupal_id, notify_on_donation, notify_on_donation_additional_emails, notify_weekly_report, notify_campaign_progress) VALUES(:drupalid, :ondonation, :additionalemails, :weeklyreport, :campaignprogress)", array(
        ':drupalid'         => $uid,
        ':ondonation'       => $r['notify_on_donation'],
        ':additionalemails' => $r['notify_on_donation_additional_emails'],
        ':weeklyreport'     => $r['notify_weekly_report'],
        ':campaignprogress' => $r['notify_campaign_progress']));


    return $r;
}

function dw_campaigns_user_notify_settings_page() {
    $html = '<h2>Notification Settings</h2>';
    $html .= drupal_render(drupal_get_form('dw_campaigns_user_notify_settings_form'));
    return $html;
}

function dw_campaigns_user_notify_settings_form($form, &$form_state) {
    global $user;

    $current_settings       = dw_campaigns_user_get_notify_settings($user->uid);

    $form = array();
    $form['#attributes']    = array(
        'class'             => array('dw_campaigns-notifications-form'),
        'enctype'           => "multipart/form-data"
    );

    $form['notify_intro_text'] = array(
        '#type'             => 'markup',
        '#markup'           => '<p>Select the email notifications you would like to receive</p>'
    );

    $form['notify_on_donation']	    = array(
        '#type'             => 'checkbox',
        '#title'            => t('Each Donation to My Page'),
        '#default_value'    => (isset($current_settings['notify_on_donation']) && $current_settings['notify_on_donation']) ? 1 : 0,
    );

    $form['notify_on_donation_additional_emails']	    = array(
        '#type'             => 'textfield',
        '#title'            => t('Notify On Donation Additional Emails'),
        '#default_value'    => isset($current_settings['notify_on_donation_additional_emails']) ? $current_settings['notify_on_donation_additional_emails'] : '',
    );

    $form['notify_weekly_report']	    = array(
        '#type'             => 'checkbox',
        '#title'            => t('Weekly Donation Reports'),
        '#default_value'    => (isset($current_settings['notify_weekly_report']) && $current_settings['notify_weekly_report']) ? 1 : 0,
    );

    $form['notify_campaign_progress']	    = array(
        '#type'             => 'checkbox',
        '#title'            => t('Event Progress Updates'),
        '#default_value'    => (isset($current_settings['notify_campaign_progress']) && $current_settings['notify_campaign_progress']) ? 1 : 0,
    );

    $form['cancel'] = array(
        '#type'             => 'markup',
        '#markup'           => '<a onclick="location.replace(&quot;/dw/cancel/notify&quot;); return false;" class="form-submit btn" value="Cancel" id="edit-cancel" name="op">' . t('Cancel') . '</a>'
    );

    $form['submit']         = array(
        '#type'             => 'submit',
        '#value'            => t('Submit'),
        '#attributes'       => array('class'=> array('btn'))
    );

    return $form;
}

function dw_campaigns_user_notify_settings_form_submit(&$form, &$form_state) {
    global $user;

    //register the user in drupal
    $values                     = $form_state['values'];

    $n                          = array();

    foreach($values as $key => $value) {
        if(strncmp($key, 'notify_', 7) === 0) {
            $n[$key]            = $value;
        }
    }

    dw_campaigns_user_set_notify_settings($user->uid, $n);
    drupal_set_message(t('Notification settings have been updated.'));
}

function dw_campaigns_users_donate_co_page($username, $campaignPath, $account = NULL) {
    $data = dw_campaigns_users_pcp_page($username, $campaignPath, true);
    extract($data);

    drupal_set_title($pcp->title);

    if(!is_null($account)) {
        echo theme('dw_campaigns_users_donate_co_redir_page_theme', array('data' => $account));
        $_SESSION['donate_page_redir']    = 'dw/users/' . arg(2) . '/' . arg(3) . '/join';
        die;
    } else {

        return theme('dw_campaigns_users_donate_co_page_theme', array('thisUser' => $owner_user, 'campaign' => $campaign, 'pcp' => $pcp));
    }

}

function dw_campaigns_users_donate_co_page_form($form, &$form_state, $campaign, $pcp, $include_donation_conf = TRUE) {
    $form = dw_campaigns_users_donate_page_form($form, $form_state, $campaign, $pcp, $include_donation_conf);

    unset($form['donation-currency']);
    unset($form['payment-fieldset']);
    $form['submit-fieldset']['submit']['#value'] = t('Click to Donate');
    //$form['form_id']['#value'] = 'dw_campaigns_users_donate_co_page_form';
    unset($form['donation-comments']['picture-preview']);
    unset($form['donation-comments']['user-photo']);
    unset($form['donation-comments']['displayname']);
    unset($form['donation-comments']['contribution_comments']);
    $form['donation-comments']['#title'] = 'Donation Visibility';

    $values = isset($form_state['values']) ? $form_state['values'] : array();

    $countryId  = isset($values['country2']) ? $values['country2'] : 1228;
    $stateId    = isset($values['state2']) ? $values['state2'] : '';
/*
    unset($form['donor-information']['state']);
    unset($form['donor-information']['country']);
    unset($form['pws_relationship']);

//zelda
    $countries = _dw_civicrm_pseudoconstant_country();
    $form['country2']        = array(
        '#type'             => 'select',
        '#title'            => t('Country'),
        '#options'          => $countries,
        '#default_value'    => $countryId,
        '#required'         => true,
        '#ajax' => array(
            'event'    => 'change',
            'callback' => 'dw_campaigns_country_select_callback',
            'wrapper'  => 'country_replace',
        ),
    );


    $form['state2']        = array(
        '#type'             => 'select',
        '#title'            => t('State'),
        //'#options'          => array(''=>'Select State/Province') + $states,
        '#options'          => dw_campaigns_get_state_by_country($countryId),
        '#default_value'    => $stateId,
        '#required'         => true,
        '#prefix'           => '<div id="country_replace">',
        '#suffix'           => '</div>',
    );
*/

    return $form;
}

function dw_campaigns_country_select_callback($form, $form_state) {
    return $form['state2'];
}

function dw_campaigns_get_state_by_country($country = NULL) {
    global $dw_settings;

    //JFN - january 8 2014 - say wha?
file_put_contents("/tmp/zs");

    $parsed = parse_url($dw_settings['restUrl']);
    $target = sprintf("http://%s/civicrm/ajax/jqState?_id=address_1_country_id&_name=address%%5B1%%5D%%5Bcountry_id%%5D&_value=%s", $parsed['host'], $country);

    $states = array();

    $data = file_get_contents($target);
    $ball = json_decode($data);
file_put_contents("/tmp/zs");
    foreach($ball as $state_obj) {
        $value = $state_obj->value;
        $name  = $state_obj->name;

        $states[$value] = $name;
    }

    return $states;
}

function dw_campaigns_users_donate_co_page_form_validate(&$form, &$form_state) {
    global $user;
    global $dw_campaign_module_path;

    $multi = FALSE;

    $thisUser        = dw_campaigns_get_selected_user();

    $donation_amount = preg_replace('/[^0-9\.]/', '', $form_state['values']['donation-amount']);
    $form_state['values']['donation-amount'] = $donation_amount;

    if($donation_amount <= 0) {
        form_set_error('donation-amount', t('Donation amount must be > 0.00'));
        return;
    }
}

function dw_campaigns_users_donate_co_page_form_submit(&$form, &$form_state) {

    $values = $form_state['values'];

    $hash = md5(microtime(TRUE) . $_SERVER['REMOTE_ADDR']);

    db_query("insert into {dw_campaigns_checkout_swap} (hash, data) VALUES(:hash, :data)", array(':hash' => $hash, ':data' => serialize($values)));

    $_SESSION['donation_id'] = $hash;

    drupal_goto($_GET['q'] . '/' . $hash);
}

function dw_campaigns_users_donate_page_form($form, &$form_state, $campaign, $pcp, $include_donation_conf = TRUE) {
    global $user;
    $multi      = FALSE;

    $campaign = !is_object($campaign) ? node_load($campaign) : $campaign;

    $contact    = dw_campaigns_resolve_contact($user);

    $form = array();

    $form['#attributes']    = array(
        'class'             => array('dw_campaigns-profile-form'),
        'enctype'           => "multipart/form-data"
    );

    $currency = ' (USD)';

    if(!is_null($campaign)) {
        $currency = isset($campaign->field_dw_currency['und']['0']['value']) ? $campaign->field_dw_currency['und']['0']['value'] : 'USD';
        $currency = " ($currency)";
    }

    if($currency == ' (USD)') {
        //$currency   = '';
    }

    if($currency == ' (MULTI)') {
        $currency   = '';
        $multi      = TRUE;
    }



    if($multi) {
	$currencies = dw_campaigns_all_currencies();
        if(isset($currencies['NZD'])) {
            unset($currencies['NZD']);
        }

        if(isset($currencies['MULTI'])) {
            unset($currencies['MULTI']);
        }

        $form['donation-currency'] = array(
            '#type'             => 'select',
            '#title'            => t('Currency'),
            '#options'          => $currencies,
            '#default_value'    => isset($campaign->field_dw_therm_currency['und']['0']['value']) ? $campaign->field_dw_therm_currency['und']['0']['value'] : 'USD'
        );
    }

    // FIXME - do this better - having this hardcoded in a donation form is bad
    $currency_symbol = '$';
    switch($currency) {
        case ' (GBP)':
            $currency_symbol = '£';
            break;
        case ' (EUR)':
        case ' (EURO)':
            $currency_symbol = '';
            break;
    }

    if(isset($pcp->id)) {
        drupal_add_js('
          (function($) {
            $(document).ready(function() {
              dw_campaigns.initLivePosition("' . $pcp->id . '", "#edit-donation-amount", ".donation-live");
            });
          })(jQuery);
        ','inline');
    }

    $address_form   = dw_campaigns_address_form_fields($contact);


    // build building address fields
    $billing_address_form = array();

    foreach($address_form as $key => $value) {
        if(is_array($value)) {
            $title = isset($value['#title']) ? $value['#title'] : '';
            $value['#title'] = t('Billing ') . $title;
        }
        if(is_array($value) && isset($value['#default_value'])) {
            unset($value['#default_value']);
        }

        if(is_array($value) && isset($value['#required'])) {
            unset($value['#required']);
        }

        $billing_address_form['billing_' . $key] = $value;
    }

    // test javascript state population with this..
    //$billing_address_form['billing_state']['#default_value'] = 1000;

    $form['donor-information'] = array(
        '#type'             => 'fieldset',
        '#title'            => t('Donation Information')
    );

    $form['donor-information']['donation-amount'] = array(
        '#type'             => 'textfield',
        '#title'            => t('Amount') . ' ' . $currency,
        '#default_value'    => variable_get('default_contribution_amount', '100.00')
    );

    $form['donor-information'] = array_merge($form['donor-information'], $address_form);
    //$form           = array_merge($form, $address_form);

    /**
     * Donation comments
     */
    $form['donation-comments'] = array(
        '#type'             => 'fieldset',
        '#title'            => t('Donation Picture and Comment')
    );

    $form['donation-comments']['include_in_honor_roll'] = array(
        '#type'             => 'checkbox',
        '#title'            => t('Show my name and donation amount on the fundraiser\'s campaign page.'),
        '#default_value'    => 1,
    );

/*
    $form['donation-comments']['picture-heading'] = array(
        '#type'             => 'markup',
        '#markup'           => '<h3 class="clear">' . t('Contribution Picture') . '</h3>'
    );
*/
    // TODO - fix this
    $temp_filename='';
    $temp_file=_dw_campaigns_user_upload_photo();
    if(isset($temp_file->filepath))
    {
	$temp_filename=$temp_file->filepath;
    }

    $image_params = array(
        'w'                 => 100,
        'contribution'      => true,
        'src'               => $temp_filename
    );

    //get the user and drop it in for a preview if they are logged in (user-photo is the default for a donation)
    $imageSrc = _dw_campaigns_get_photo($user, $image_params, 'user-photo', NULL, $temp_filename);

    $form['user-photo-tmp'] = array(
        '#type'             => 'hidden',
        '#value'            => $temp_filename
    );

    $form['donation-comments']['picture-preview'] = array(
       '#type'              => 'markup',
       '#markup'            => '<div id="profile-form-image-wrapper"><img src="' . $imageSrc . '" /></div>'
    );

    $form['donation-comments']['user-photo']    = array(
        '#type'             => 'file',
        '#title'            => t('Photo'),
        '#attributes'       => array(
            'size'          => ''
        ),
        '#description'      => t("Select a photo to appear next to your donation on the fundraiser's campaign page.  If logged in via Facebook, your profile picture will be used if you do not select a photo.")
    );
// END

// this doesn't seem to be used anywhere
    if(isset($pcp->contact_id)) {
        $params = array(
            'contact_id'    => $pcp->contact_id,
            'returnFirst'   => 1
        );
        $pcpContact        = _dw_civicrm_contact_get($params);
    } else {
        $pcpContact             = new stdClass;
        $pcpContact->first_name = '';
    }

    $form['donation-comments']['displayname'] = array(
        '#type'             => 'textfield',
        '#title'            => t('Donor Display Name'),
        //'#required'         => true,
        '#attributes'       => array('autocomplete'=>'off'),
        '#description'      => t('Name displayed for your contribution. Defaults to first name and last initial. For example, John Smith is John S.')
    );

    $form['donation-comments']['contribution_comments'] = array(
        '#type'             => 'textfield',
        '#maxlength'        => '160',
        '#title'            => t('Comment'),
        '#description'      => t('Leave !user a message that will be displayed next to your donation.', array('!user' => $pcpContact->first_name)),
    );

/*
    $form['privacy-fieldset'] = array(
        '#type'             => 'fieldset',
        '#title'            => t('Privacy Options')
    );

    $form['privacy-fieldset']['privacy_anonymous'] = array(
        '#type'             => 'checkbox',
        '#title'            => t('Make this donation anonymous to the user'),
        '#default_value'    =>  variable_get('default_privacy_anonymous', 0)
    );

    $form['privacy-fieldset']['privacy_contact'] = array(
        '#type'             => 'checkbox',
        '#title'            => t('Allow the user to contact me'),
        '#default_value'    => variable_get('default_privacy_contact', 1)
    );
*/

    /**
     * Payment information
     */
    $form['payment-fieldset'] = array(
        '#type'             => 'fieldset',
        '#title'            => t('Payment Information')
    );
/*
    $form['payment-fieldset']['billing-info'] = array(
        '#type'             => 'fieldset',
        '#title'            => 'Billing Information Differs From Donor',
        '#collapsible'      => TRUE,
        '#collapsed'        => TRUE
    );
*/

    $form['payment-fieldset']['use_alt_billing'] = array(
        '#type'             => 'checkbox',
        '#title'            => t('Billing Information is the same as Donor Information'),
        '#default_value'    => 1
    );

    $form['payment-fieldset']['billing-info'] = array(
        '#type'             => 'fieldset',
        '#title'            => 'Billing Information',
        '#prefix'           => '<div id="alt-billing-div" class="alt-billing-hid">',
        '#suffix'           => '</div>',
/*
        '#collapsible'      => TRUE,
        '#collapsed'        => TRUE
*/
    );


    $form['payment-fieldset']['billing-info'] = array_merge($form['payment-fieldset']['billing-info'], $billing_address_form);

    drupal_add_js('
        (function ($) {
          $(document).ready(function() {

            function set_alt_billing() {
                if(!$("#edit-use-alt-billing").attr("checked")) {
                    $("#alt-billing-div").removeClass("alt-billing-hid");
                } else {
                    $("#alt-billing-div").addClass("alt-billing-hid");
                }
            }


            $("#edit-use-alt-billing").click(function() {
                set_alt_billing();
            });


            dw_campaigns.initCountrySelect("#edit-billing-country", "#edit-billing-state");

            set_alt_billing();
          });
        })(jQuery);
        ','inline');

    $form['payment-fieldset']['card_type']    = array(
        '#type'             => 'select',
        '#title'            => t('Card Type'),
        '#options'          => array(
            ''              => 'Select',
            'Visa'              => 'Visa',
            'MasterCard'        => 'Master Card',
            'Amex'              => 'Amex',
            'Discover'          => 'Discover'
        ),
        '#required'         => true
    );

    $form['payment-fieldset']['card_number'] = array(
        '#type'             => 'textfield',
        '#title'            => t('Card Number'),
        '#required'         => true
    );

    $form['payment-fieldset']['cvv'] = array(
        '#type'             => 'textfield',
        '#title'            => t('Security Code'),
        '#required'         => true,
        '#size'             => 5,
        '#suffix'           => '<div class="cvv-instructions"><img src="https://fpwr.org/sites/all/modules/civicrm/i/mini_cvv2.gif" /><span>Usually the last 3-4 digits in the signature area on the back of the card.</span></div>'
    );

    $months = array();
    for($i = 1; $i <= 12; $i++) {
        // lol, I hope we never change the names of the months, otherwise this will show the old names ;)
        $months[$i] = date('M', mktime(1, 1, 1, $i, 1, 2009));
    }

    $form['payment-fieldset']['exp-month'] = array(
        '#type'             => 'select',
        '#title'            => t('Expiration'),
        '#options'          => $months
    );

    $years  = array();
    $c      = date('Y');
    while($c <= date('Y') + 10) {
        $years[] = $c++;
    }

    $form['payment-fieldset']['exp-year'] = array(
        '#type'             => 'select',
        '#options'          => $years
    );

    if($campaign->field_dw_processor_mode['und']['0']['value'] == 'test') {
        $form['payment-fieldset']['card_number']['#default_value']  = '4035630376186495';
        $form['payment-fieldset']['exp-month']['#default_value']    = 2;
        $form['payment-fieldset']['exp-year']['#default_value']     = 5; // 2016 is 2011 + 5
    }

    $form['pws_relationship'] = array(
            '#type'             => 'select',
            '#title'            => t('What is your relationship to PWS?'),
            '#options'          => dw_campaigns_relationship_tag_list(),
            '#required'         => true
    );

    //JFN - january 20 2014 0924 - [#todo "add in child and adult form fields from dw_campaigns_donor_participation_form"]
    //migrate the form fields, and the form validation here.
    //we do run into a situation where we don't always want to display them here.
    //so what we're going to do is add a toggle in the admin panel.
    //in the form validate, use an isset to determine if we even use these fields.
    //in the submit form hook, use an isset to determine if we should save these fields at all.
    if( variable_get('dw_campaigns_donors_attending', false) ){
        //@fixme determine best way to hide this group of fields if you can't actually attend.
        //dvr( $campaign );
        $event_max = variable_get('dw_campaigns_walking_event_max', '6');
        $contact_id = isset($_SESSION['contact_id']) ? $_SESSION['contact_id'] : NULL;

        for($i=0; $i<=$event_max; $i++) {
            $attending[$i] = $i;
        }

        $form['choice'] = array(
            '#type'             => 'markup',
            '#markup'           => '<div class="participation-words">' . t('Do you plan to attend the @campaign walk?', array('@campaign' => $campaign->title)) . '</div><div class="buttons"><div class="btn yes fb-unhide">Yes</div><div class="btn no fb-close">No</div></div>'
        );

        list($children, $adults) = dw_campaigns_get_event_participants_count($campaign->nid, 0, $contact_id);

        $form['event-participants'] = array(
            '#type'             => 'fieldset',
        );

        $form['event-participants']['children'] = array(
            '#type'             => 'select',
            '#title'            => t('How many children will be attending the event'),
            '#options'          => $attending,
            '#default_value'    => $children
        );

        $form['event-participants']['adults'] = array(
            '#type'             => 'select',
            '#title'            => t('How many adults will be attending the event'),
            '#options'          => $attending,
            '#default_value'    => $adults
        );

        $form['contact_id']     = array(
            '#type'             => 'hidden',
            '#value'            => $contact_id
        );

        $form['campaign_id']    = array(
            '#type'             => 'hidden',
            '#value'            => $campaign->nid
        );

        $form['event-participants']['submit']         = array(
            '#type'             => 'submit',
            '#value'            => t('Submit'),
            '#attributes'       => array('class'=> array('btn'))
        );
    }

    //payment information
    $form['submit-fieldset'] = array(
        '#type'             => 'fieldset'
    );

    $owner_user     = dw_campaigns_get_selected_user();
    if(is_null($owner_user)) {
        $displayname    = '';

    } else {
        $displayname    = htmlentities($owner_user->data['displayname'], ENT_QUOTES);

    }

    $title          = htmlentities($campaign->title, ENT_QUOTES);

    if($include_donation_conf) {
        drupal_add_js('
            (function($) {
              $(document).ready(function() {
                $(".confirm-amount").click(function() {
                  var amount = $("#edit-donation-amount").val();
                  var owner  = "' . $displayname . '";
                  var title  = "' . $title . '";
                  if(amount == "" || amount<0.01) {
                      alert("Please specify an amount for your donation");
                      return false;
                  }

                  res = confirm("Please confirm your donation of ' . $currency_symbol . '" + amount + " to the " + title + ".");

                  if(res) {
                    $("#show-words").fancybox().trigger("click");
                    setTimeout("jQuery(\"#edit-submit\").attr(\"disabled\", true)", 500);
                  }

                  return res;

                });
              });
            })(jQuery);
            ','inline');
    }


    $form['submit-fieldset']['cancel'] = array(
        '#type'             => 'markup',
        '#markup'           => '<a onclick="location.replace(&quot;/dw/cancel/donate&quot;); return false;" class="form-submit btn" value="Cancel" id="edit-cancel" name="op">' . t('Cancel') . '</a>'
    );

    $form['submit-fieldset']['submit'] = array(
        '#type'             => 'submit',
        '#value'            => 'Donate Now',
        '#attributes'       => array('class' => array('btn', 'confirm-amount'))
    );

    $form['campaign'] = array(
        '#type'     => 'hidden',
        '#value'    => $campaign->nid
    );

    $form['pcpId'] = array(
        '#type'     => 'hidden',
        '#value'    => $pcp->id
    );


    return $form;
}

function dw_campaigns_users_donate_page_form_validate(&$form, &$form_state) {
    global $user;
    global $dw_campaign_module_path;

    $multi = FALSE;

    $thisUser        = dw_campaigns_get_selected_user();

    $donation_amount = preg_replace('/[^0-9\.]/', '', $form_state['values']['donation-amount']);
    $form_state['values']['donation-amount'] = $donation_amount;

    if($donation_amount <= 0) {
        form_set_error('donation-amount', t('Donation amount must be > 0.00'));
        return;
    }

    $values = $form_state['values'];

    // we don't currently need this here
    $campaign           = node_load($values['campaign']);

    // $campaign is the drupal node id!!
    $contributionType   = dw_campaigns_create_contribution_type_for_campaign($campaign);
    $contributionPage   = dw_campaigns_get_contribution_page_for_campaign($campaign);


    $countries_longname = _dw_civicrm_pseudoconstant_country();
    // turn country 'id' 1228 (united states) into 'US'
    $countries          = _dw_civicrm_pseudoconstant_countryIsoCode();
    $countryID          = $values['country'];
    $country_iso_code   = isset($countries[$countryID])?$countries[$countryID]:'';

    $billing_countryID  = $values['billing_country'];
    $billing_country_iso_code   = isset($countries[$billing_countryID])?$countries[$billing_countryID]:'';

    $states             = _dw_civicrm_pseudoconstant_stateprovince();
    $state = isset($states[$values['state']])?$states[$values['state']]:'';

    if(empty($state))
        $state='CA';

    if($values['state'] == 'nostate') {
        $state = '';
    }

    $billing_state = isset($states[$values['billing_state']])?$states[$values['billing_state']]:'';


/*
    if($values['include_in_honor_roll'] == 1 && empty($values['contribution_comments']) )
    {
        form_set_error('contribution_comment', t('You must include a comment if you want to be shown as a contributor'));
        return;
    }
*/

    if(isset($_SESSION['messages']['error']) && count($_SESSION['messages']['error']) > 0) {
        form_set_error('', 'Please fix errors and try again');
        return;
    }

    $remote_addr                                = $_SERVER['REMOTE_ADDR'];
    if($remote_addr == '::1') {
        $remote_addr                            = '127.0.0.1';
    }


    if($campaign->field_dw_currency['und']['0']['value']  == 'MULTI') {
        $multi = TRUE;
    }

    //$alt_billing = !empty($values['billing_first_name']) ? TRUE : FALSE;
    $alt_billing = empty($values['use_alt_billing']) ? TRUE : FALSE;

    $params['amount']                           = $values['donation-amount'];
    $params['amount_other']                     = $values['donation-amount'];
    $params['custom_1']                         = '';

// only save this as billing info if they didn't supply alternate information - Susan said not to save billing info if its on behalf of someone
if(!$alt_billing) {
// -5 means 'billing'
    $params['email-5']                          = $values['email'];
    $params['billing_first_name']               = $values['first_name'];
    $params['billing_middle_name']              = '';
    $params['billing_last_name']                = $values['last_name'];
    $params['billing_street_address-5']         = $values['address_1'];
    $params['billing_city-5']                   = $values['city'];
    $params['billing_country_id-5']             = $country_iso_code; // $countries[$values['country']];
    $params['billing_state_province-5']         = $state;
    $params['billing_country-5']                = $country_iso_code;
}

    $params['credit_card_number']               = $values['card_number'];
    $params['cvv2']                             = $values['cvv'];
    $params['credit_card_exp_date']['M']        = $values['exp-month'];
    $params['credit_card_exp_date']['Y']        = $values['exp-year']+date('Y');
    $params['credit_card_type']                 = $values['card_type'];
    $params['month']                            = $values['exp-month'];
    $params['year']                             = $values['exp-year']+date('Y');
    $params['ip']                               = $remote_addr;
    $params['ip_address']                       = $remote_addr;
    $params['amount_level']                     = '';
    $params['currencyID']                       = $contributionPage->currency;
    $params['currency']                         = $contributionPage->currency;
    $params['payment_action']                   = 'Sale';
    $params['is_pay_later']                     = '';
    $params['is_recur']                         = '';
    $params['description']                      = 'Online Contribution: ' . $contributionType->name;
    $params['accountingCode']                   = '';
    $params['first_name']                       = $values['first_name'];
    $params['middle_name']                      = '';
    $params['last_name']                        = $values['last_name'];
    $params['email']                            = $values['email'];
    $params['street_address']                   = $values['address_1'];
    $params['city']                             = $values['city'];
    $params['state_province']                   = $state;
    $params['postal_code']                      = $values['postal_code'];
    $params['country']                          = $country_iso_code;
    $params['contributionType_name']            = $contributionType->name;
    $params['contributionType_accounting_code'] = $contributionType->accounting_code;
    $params['contributionPageID']               = $contributionPage->id;
    $params['subject']                          = '';

// save home address
    $params['email-1']                          = $values['email'];
    $params['street_address-1']                 = $values['address_1'];
    $params['city-1']                           = $values['city'];
    $params['state_province-1']                 = $state;
    $params['postal_code-1']                    = $values['postal_code'];
    $params['country-1']                        = $country_iso_code;

    $params['email-5']                          = $values['email'];
    $params['street_address-5']                 = $values['address_1'];
    $params['city-5']                           = $values['city'];
    $params['state_province-5']                 = $state;
    $params['postal_code-5']                    = $values['postal_code'];
    $params['country-5']                        = $country_iso_code;



/*
    // this is what they use
    $fields=array(
        'email-Primary' => 1,
        'billing_first_name' => 1,
        'billing_middle_name' => 1,
        'billing_last_name' => 1,
        'billing_street_address-5' => 1,
        'billing_city-5' => 1,
        'billing_state_province_id-5' => 1,
        'billing_postal_code-5' => 1,
        'billing_country_id-5' => 1,
        'credit_card_number' => 1,
        'cvv2' => 1,
        'credit_card_exp_date' => 1,
        'credit_card_type' => 1,
        'first_name' => 1,
        'middle_name' => 1,
        'last_name' => 1,
        'email-5' => 1,
    );
*/

    /* since we are using the REST API we need to pass it the fields we want to dedupe on */
    foreach($params as $key => $value) {
        $dedupe['fields_' . $key] = $value;
    }

    $dedupe = array_merge($dedupe, $params);
    $contactID = _dw_campaigns_dwutils_get_deduped_contact_id($dedupe);

    // save this for the rest of the session
    $_SESSION['contact_id'] = $contactID;

    dw_campaigns_add_address_book($thisUser, $values['email'], $values['first_name'] . ' ' . $values['last_name']);

    $mode = $campaign->field_dw_processor_mode['und']['0']['value'];
    if($multi) {
        global $currency_processor;

        $ppID = $campaign->field_dw_processor['und']['0']['value'];
        $picked_currency = $values['donation-currency'];
        $params['currencyID']    = $picked_currency;

        if($ppID != 5) {
    	    if(!isset($currency_processor[$picked_currency])) {
                form_set_error('', t('Invalid Currency') . $picked_currency);
                return;
            }
            $ppID                    = $currency_processor[$picked_currency];
        }

    } else {
        $ppID = $campaign->field_dw_processor['und']['0']['value'];
    }

    $invoice_id                  = dw_campaigns_invoice_generate_id($params['currencyID']);

    $params['invoiceID']         = $invoice_id;

    // add in some fields we learn of now, so submit can use them
    $form_state['values']['contact_id'] = $contactID;
    $form_state['values']['invoice_id'] = $invoice_id;

    $override = variable_get('dw_campaign_offline_transaction_override', '1234588');
    // this will approve the transaction without actually processing it
    if($values['card_number'] == $override) {
        $form_state['values']['offline']       = 1;
        $form_state['values']['trxn_id']       = 'FAKECC-' . str_replace(".", "-", microtime(TRUE));;
        return;
    }

    if(is_null($mode) || is_null($ppID)) {
        form_set_error('', "Please contact support, unknown billing processor");
        return;
    }

    $paymentParams          = array();
    $paymentParams['mode']  = $mode;
    $paymentParams['id']    = $ppID;

    $paymentProcessor       = _dw_campaigns_paymentprocessor_getpayment($paymentParams);

    if($mode === 'test') {
        /*
        Visa   4155100421445993
        Exp Date:  7/2015
        */
        $paymentProcessor->url_api      = 'https://api.sandbox.paypal.com/';
        $paymentProcessor->user_name    = 'ryansm_1280248291_biz_api1.jemeznet.com';
        $paymentProcessor->password     = '1280248301';
        $paymentProcessor->signature    = 'A9KqCy2x6U0txLZNrROYvr3t-N5QAh0OlVXIQQRviR7B53jI2ipzfQDT';
    }

    $paymentProcessor->subject      = '';


    if($mode === 'fake') {
        $form_state['values']['trxn_id'] = 'OFFLINE-' . str_replace(".", "-", microtime(TRUE));
        return;
    }



    $paymentParams                          = array();
    $paymentParams['paymentProcessor']      = $paymentProcessor;
    $paymentParams['mode']                  = $mode;
    $paymentParams['component']             = 'Contribute';
//  $paymentParams                        = array_merge($params, $paymentParams);

    $paymentParams['is_recur']              = ''; // civi generates notices if this isn't set

    $paymentParams['payment_action']        = $params['payment_action'];
    $paymentParams['amount']                = $params['amount'];
    $paymentParams['currencyID']            = $params['currencyID'];
    $paymentParams['invoiceID']             = $params['invoiceID'];
    $paymentParams['ip_address']            = $params['ip_address'];
    $paymentParams['credit_card_type']      = $params['credit_card_type'];
    $paymentParams['credit_card_number']    = $params['credit_card_number'];
    $paymentParams['month']                 = $params['month'];
    $paymentParams['year']                  = $params['year'];
    $paymentParams['cvv2']                  = $params['cvv2'];
    $paymentParams['description']           = $params['description'];

if(!$alt_billing) {
    $paymentParams['first_name']            = $params['first_name'];
    $paymentParams['last_name']             = $params['last_name'];
    $paymentParams['billing_first_name']    = $params['first_name'];
    $paymentParams['billing_last_name']     = $params['last_name'];
    $paymentParams['email']                 = $params['email'];
    $paymentParams['street_address']        = $params['street_address'];
    $paymentParams['city']                  = $params['city'];
    $paymentParams['state_province']        = $state;
    $paymentParams['country']               = $country_iso_code;
    $paymentParams['postal_code']           = $params['postal_code'];
} else {
    $paymentParams['first_name']            = $values['billing_first_name'];
    $paymentParams['last_name']             = $values['billing_last_name'];
    $paymentParams['billing_first_name']    = $values['billing_first_name'];
    $paymentParams['billing_last_name']     = $values['billing_last_name'];
    $paymentParams['email']                 = $values['billing_email'];
    $paymentParams['street_address']        = $values['billing_address_1'];
    $paymentParams['city']                  = $values['billing_city'];
    $paymentParams['state_province']        = $billing_state;
    $paymentParams['country']               = $billing_country_iso_code;
    $paymentParams['postal_code']           = $values['billing_postal_code'];
}


    $result = _dw_campaigns_payment_dodirectpayment($paymentParams);

    if((is_object($result)) && isset($result->trxn_id))
    {
        $form_state['values']['trxn_id'] = $result->trxn_id;
        return;
    }
    else
    {
        // this should only be used in a non-prodction environment for debugging purposes.  DO NOT USE ON LIVE SERVERS
	// file_put_contents($dw_campaign_module_path . "/failed/" . microtime(true), print_r($paymentParams, TRUE) . "\n" . print_r($result, TRUE));

        $error_field='';
        $error_code = $result->error;

        $IATS_errors = array(
            1   => 'Agent Code has not been set up on the authorization system.',
            2   => 'Unable to process transaction. Verify and re-enter credit card information.',
            3   => 'Charge card expired.',
            4   => 'Incorrect expiration date.',
            5   => 'Invalid transaction. Verify and re-enter credit card information.',
            6   => 'Transaction not supported by institution.',
            7   => 'Lost or stolen card.',
            8   => 'Invalid card status.',
            9   => 'Restricted card status. Usually on corporate cards restricted to specific sales.',
            10  => 'Error. Please verify and re-enter credit card information.',
            11  => 'General decline code, may have different reasons for each card type. Please have your client call cu
stomer service.',
            14  => 'This means that the credit card is over the limit.',
            15  => 'Decline code, may have different reasons for each card type. Please have your client call customer s
ervice.',
            16  => 'Invalid charge card number. Verify and re-enter credit card information.',
            17  => 'Unable to authorize transaction. Verify card information with customer and re-enter. Could be invali
d name or expiry date.',
            18  => 'Card not supported by institution.',
            19  => 'Incorrect CVV2.',
            22  => 'Bank Timeout. Bank lines may be down or busy. Re-try transaction later.',
            23  => 'System error. Re-try transaction later.',
            24  => 'Charge card expired.',
            25  => 'Capture card. Reported lost or stolen.',
            27  => 'System error, please re-enter transaction.',
            29  => 'Rejected by Ticketmaster.',
            31  => 'Manual reject code ',
            39  => 'Contact Ticketmaster 1-888-955-5455 ',
            40  => 'Card not supported by Ticketmaster. Invalid cc number.',
            41  => 'Invalid Expiry date ',
            42  => 'CVV2 required',
            43  => 'Incorrect AVS',
            100 => 'Authorization system down. DO NOT REPROCESS.',
        );


        if($paymentProcessor->payment_processor_type == 'PayPal') {
            switch($error_code)
            {
                case '10001':
                    form_set_error('card_number', t('Error Processing Card, please try a different number'));
                    break;
                case '15005':
                    form_set_error('card_number', t('Transaction declined, please try a different card'));
                    break;
                case '15006':
                    form_set_error('card_number', t('Error Processing Card, please verify card number and type'));
                    break;
                case '15004':
                    form_set_error('cvv', t('Error Processing Card, please double check the CVV number (number on back of card)'));
                    break;
                case '10505':
                case '10544':
                    form_set_error('card_number', t('Address supplied does not match card used'));
                    break;
                case '10527':
                case '10759':
                    form_set_error('card_number', t('Invalid Card Number'));
                    break;
                case '10502':
                case '10508':
                    // expiration date
                    form_set_error('exp-month', t('Expiration Date'));
                    form_set_error('exp-year', t('Expiration Date'));
                    array_pop($_SESSION['messages']['error']);
                    break;
                case '10536':
                    form_set_error('', t('Duplicate Charge for this invoice'));
                    break;
                case '10558':
                    form_set_error('card_number', t('Currency not supported for card type, try a different card'));
                    break;
                case '10755':
                    form_set_error('card_number', t('Currency not supported by this processor'));
                    break;
                case '10764':
                    form_set_error('card_number', t('This transaction cannot be processed at this time. Please try again later'));
                    break;
                default:
                    form_set_error('', "Please check your form values and try again ($error_code)");
                    // probably should send someone an email so we learn other common error codes
                    break;
            }
            return;
	} elseif($paymentProcessor->payment_processor_type == 'IATS') {

            $errmsg = isset($IATS_errors[$error_code]) ? $IATS_errors[$error_code] : '';

            switch($error_code) {
                case 12:
                    form_set_error('exp-month', t('Incorrect Expiration Date or CVV2 code'));
                    form_set_error('exp-year', t('Incorrect Expiration Date or CVV2 code'));
                    form_set_error($errmsg);
                    break;
		case 3:
		case 4:
                    form_set_error('exp-month', t('Expiration Date'));
                    form_set_error('exp-year', t('Expiration Date'));
                    form_set_error($errmsg);
                    break;
		case 2:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 16:
                case 18:
                    form_set_error('card_number', $errmsg);
                    break;
                case 11:
                case 14: // over limit
                case 15:
                case 40:
                    form_set_error('card_number', t('Please try a different card'));
                    break;
                case 17:
                case 19:
                    form_set_error('', t('Please recheck name and card information'));
                    break;
                case 22:
                case 23:
                    form_set_error('', t('Please recheck name and card information'));
                    break;
                case 24:
                case 41:
                    form_set_error('exp-month', t('Expiration Date'));
                    form_set_error('exp-year', t('Expiration Date'));
                    break;
                case 25:
                case 27:
                case 29:
                case 31:
                case 39:
                case 100:
                    form_set_error('', t('Failed to charge card - please try a different card'));
                    break;
		case 42:
                    form_set_error('cvv', t('CVV2 (number on back) required'));
                    break;
                default:
                    form_set_error('', t('Contact Webmaster, unknown error code: @code', array('@code' => $error_code)));
                    break;
            }

            return;
        }
    }

    file_put_contents("/tmp/b____", serialize($result));

    form_set_error('', "Unknown error, please contact support with code '33-9J'");
    file_put_contents("/tmp/a____", serialize($result));
}

function dw_campaigns_users_donate_page_form_submit(&$form, &$form_state) {
    global $user;
    global $dw_campaign_module_path;

    $mode_type = dw_campaigns_get_selected_type();

    // this is where we do the last logic - create the contribution
    $values             = $form_state['values'];
    $campaign           = node_load($values['campaign']);

    // $campaign is the drupal node, not an id
    $contributionType   = dw_campaigns_create_contribution_type_for_campaign($campaign);
    $contributionPage   = dw_campaigns_get_contribution_page_for_campaign($campaign);

    // use the supplied display name OR do this if none is supplied
    $nickname           = ucfirst($values['first_name']) . ' ' . ucfirst($values['last_name'][0]) . '.';
    if(!empty($values['displayname'])) {
        $nickname       = $values['displayname'];
    }

    $params                             = array();
    $params['contact_id']               = $values['contact_id'];
    $params['contribution_page_id']     = $contributionPage->id;
    $params['contribution_type_id']     = $contributionType->id;
    $params['contribution_status_id']   = 1;

    if(isset($values['offline'])) {
        $params['contribution_status_id'] = 2; // fake ones get marked as pending
    }

    $params['payment_instrument_id']    = 1;
    $params['pcp_made_through_id']      = $values['pcpId'];
    $params['pcp_id']                   = $values['pcpId'];
    $params['pcp_display_in_roll']      = $values['include_in_honor_roll'];

    $params['currency']                 = $contributionPage->currency;

    if(isset($values['donation-currency'])) {
        $params['currency']             = $values['donation-currency'];
    }

    $params['pcp_roll_nickname']        = $nickname;
    $params['pcp_personal_note']        = $values['contribution_comments'];
    $params['receive_date']             = date('Y-m-d H:i:s');
    $params['total_amount']             = $values['donation-amount'];
    $params['amount']                   = $values['donation-amount'];

    $invoice_id                         = $values['invoice_id'];
    $invoice_serial                     = dw_campaigns_invoice_generate_serial($params['currency']);
    $invoice_id                         .= '-' . $invoice_serial;

    $params['invoice_id']               = $invoice_id;
    $params['trxn_id']                  = $values['trxn_id'];
    $params['source']                   = "DW Campaigns Module";


    $contribution = _dw_civicrm_contribution_create($params);

    if(is_null($contribution->id)) {
        // todo - raise some sort of an error
        drupal_set_message(t('An unknown error occured while creating contribution.  Contact Support with ID: INV-') . $values['invoice_id']);

        @mkdir($dw_campaign_module_path . "/failed_invoices/");
        file_put_contents($dw_campaign_module_path . "/failed_invoices/" . time() . $values['invoice_id'], serialize($params));
        return;
    }


    $params['contribution_id']  = $contribution->id;

    // save the new receipt number
    dw_campaigns_invoice_update_receipt($params['currency'], $invoice_serial, $params['contribution_id']);


    $softContribution           = _dw_civicrm_contributionsoft_create($params);
    $softcont_id                = $softContribution->id;

    $_SESSION['contribution']       = $contribution;
    $_SESSION['softContribution']   = $softContribution;

    // save their 'privacy settings'
@    $privacy['privacy_anonymous']   = $values['privacy_anonymous'];
@    $privacy['privacy_contact']     = $values['privacy_contact'];
    dw_campaign_update_privacy($values['contact_id'], $softcont_id, $values['pcpId'], $privacy);

    $photo_id   = isset($user->uid) ? $user->uid : NULL;
    _dw_campaigns_save_donation_photo($photo_id, basename($values['user-photo-tmp']), $softcont_id);

    $mergeObjects   = dw_campaigns_get_merge_object($campaign, $values['pcpId'], $values['contact_id']);
    // extra fields, fixups
    $mergeObjects['contribution']               = $contribution;
    $mergeObjects['contribution']->total_amount = dw_campaigns_force_decimal($mergeObjects['contribution']->total_amount, $campaign->field_dw_currency['und']['0']['value']);

/*
    $receive_date                               = $mergeObjects['contribution']->receive_date;
    $temp_receive_string                        = substr($receive_date, 0, 4) . '/' . substr($receive_date, 4, 2) . '/' . substr($receive_date, 6, 4);
*/
    $receive_date                               = str_replace("-", "", $mergeObjects['contribution']->receive_date);
    $temp_receive_string                        = substr($receive_date, 0, 4) . '/' . substr($receive_date, 4, 2) . '/' . substr($receive_date, 6, 2);

    $mergeObjects['contribution']->receive_date = date("M d, Y", strtotime($temp_receive_string));


    // this is a kludgy work around, I split the merge object creation so we can use this more places

    //$from = sprintf("%s <%s>", $campaign->field_dw_receipt_from_name['und']['0']['value'], $campaign->field_dw_receipt_from_email['und']['0']['value']);
    $from = '"'. addslashes(mime_header_encode($campaign->field_dw_receipt_from_name['und']['0']['value'])) .'" <'. $campaign->field_dw_receipt_from_email['und']['0']['value'] .'>';

    $mergeObjects['campaign_obj'] = $campaign;

    $pcp_contact        = $mergeObjects['pcp_contact'];

    $notify_settings    = dw_campaigns_user_get_notify_settings($mergeObjects['pcp_user']->uid);
    $notify_emails      = isset($notify_settings['notify_on_donation_additional_emails']) ? $notify_settings['notify_on_donation_additional_emails'] : 0;


    $mergeObjects_cleaned = $mergeObjects;
    if($privacy['privacy_anonymous'] == 1) {
        $mergeObjects_cleaned['contact']->first_name = '(Anonymous)';
        $mergeObjects_cleaned['contact']->last_name = '';
    }

    if(isset($notify_settings['notify_on_donation']) && $notify_settings['notify_on_donation'] == 1) {
        $targets = preg_split("/[\n,;]/", $notify_emails, -1, PREG_SPLIT_NO_EMPTY);

        foreach($targets as $email) {
            $email  = trim($email);

            if(strlen($email) > 5) {
                drupal_mail('dw_campaigns_receipt', 'donate-pcp-owner', $email, user_preferred_language($user), $mergeObjects_cleaned, $from);
            }
        }
        // send email to the pcp owner
        drupal_mail('dw_campaigns_receipt', 'donate-pcp-owner', $pcp_contact->email,    user_preferred_language($user), $mergeObjects_cleaned, $from);
    }

    $suffix = variable_get('dw_campaigns_cfg_tag_suffix', date('Y'));
    $name   = variable_get('dw_campaigns_cfg_tag_prefix', 'OSS') . ' donor ' . $suffix;
    $tag_id = dw_campaigns_get_tag_id_by_name($name);
    dw_campaigns_tag_contact($tag_id, array($values['contact_id']));


    // we only send a receipt if this is a REAL transaction, offline transactions do not get counted
    if(!isset($values['offline']) || 1==1) {
        // send email confirmation to donator
        drupal_mail('dw_campaigns_receipt', 'donate',           $values['email'],   user_preferred_language($user), $mergeObjects, $from);
        if($contributionPage->currency == 'CAD') {
    //        dw_campaign_receipt_report_email($contribution->id);
        }
    }

    //JFN - january 20 2014 1208 - [#migration "dw_campaigns_donor_participation_form_submit to here"]
    if( isset($values['campaign_id']) && isset($values['children']) && isset($values['adults']) && $values['contact_id']){
        //dvr($values);exit;

        dw_campaigns_set_event_participants_count($values['campaign_id'], 0, $values['children'], $values['adults'], 0, 'donator', $values['contact_id']);

        if($values['children'] > 0 || $values['adults'] > 0) {
            $suffix = variable_get('dw_campaigns_cfg_tag_suffix', date('Y'));
            $name   = variable_get('dw_campaigns_cfg_tag_prefix', 'OSS') . ' participant ' . $suffix;
            $tag_id = dw_campaigns_get_tag_id_by_name($name);
            dw_campaigns_tag_contact($tag_id, array($values['contact_id']));
        }
    }

    drupal_set_message('Thank you for your support! You will receive an email receipt shortly.');

    // $owner_user is a drupal user object
    $owner_user         = dw_campaigns_get_selected_user();

    $prefix = 'dw/users/' . $owner_user->name;
    $path   = dw_campaigns_get_campaign_path($campaign->nid, $prefix, '/donated/');

    // lets not ask people who are logged in
    if(isset($_SESSION['donate_page_redir']) && $user->uid == 0) {
        if($mode_type == 'walking') {
            $_SESSION['pop_overlay']    = "/" . $_SESSION['donate_page_redir'] . '?ajax=1';
            unset($_SESSION['donate_page_redir']);
        }
    }

    drupal_goto($path);
}

function dw_campaigns_receipt_mail($key, &$message, $params) {
    global $user;

    $campaign = $params['campaign_obj'];
    unset($params['campaign_obj']);

    $language = $message['language'];

    switch($key)
    {
        case 'donate':
            $subject            = $campaign->field_dw_receipt_subject['und']['0']['value'];
            dw_campaigns_do_merge($subject, $params);

            $message['subject'] = $subject;

            $body               = $campaign->field_dw_receipt_text['und']['0']['value'];
            dw_campaigns_do_merge($body, $params);
            $message['body'][]  = $body;

            break;
        // this is the 'notification' on donation, TODO - honor configuration settings
        case 'donate-pcp-owner':
            $subject            = variable_get('dw_campaigns_default_receipt_subject_pcp_owner', '');
            dw_campaigns_do_merge($subject, $params);

            $message['subject'] = $subject;

            $body = variable_get('dw_campaigns_default_receipt_text_pcp_owner', 'Donation Received for your personal campaign');
            dw_campaigns_do_merge($body, $params);
            $message['body'][]  = $body;

            break;
    }
}

function dw_campaigns_get_merge_object($campaign = NULL, $pcp = NULL, $contactID = NULL) {
    global $user;

    $mergeObjects   = array();
    $rawurl         = '';

    $temp_pcp       = NULL;
    $pcp_contact    = NULL;
    $pcp_user       = NULL;

    if(!is_null($campaign)) {
        $campagin                               = is_object($campaign) ? $campaign : node_load($campaign);

        $rawurl                                 = dw_campaigns_user_get_pcp_url($user, $campaign, TRUE);
        $res                                    = dw_campaigns_get_contribution_total_for_campaign($campaign->nid);
        $campaign->raised_amount                = dw_campaigns_force_decimal($res, $campaign->field_dw_currency['und']['0']['value']);
        $temp                                   = dw_campaigns_force_decimal($campaign->field_dw_fundraising_goal['und']['0']['value']);
        $campaign->fundraising_goal_formatted   = $temp;
    }

    if(!is_null($pcp)) {
        $pcpid = is_object($pcp) ? $pcp->id : $pcp;

        $temp_pcp               = dw_campaigns_user_get_pcp_by_id($pcpid, TRUE);

        if(isset($temp_pcp->id)) {
            if(isset($campaign->field_dw_currency['und']['0']['value'])) {
                $temp_pcp->goal_amount  = dw_campaigns_force_decimal($temp_pcp->goal_amount, $campaign->field_dw_currency['und']['0']['value']);
            } else {
                $temp_pcp->goal_amount  = dw_campaigns_force_decimal($temp_pcp->goal_amount);
            }

            $res                        = dw_campaigns_get_contribution_total_for_pcp($temp_pcp);
            $temp_pcp->raised_amount    = dw_campaigns_force_decimal($res['total']);
            $temp_pcp->donation_count   = $res['count'];
            $temp_pcp->url              = $rawurl;

            // lookup civi user record for pcp, we use this for merges and to get email address for notifications
            $params = array(
                'returnFirst'           => 1,
                'contact_id'            => $temp_pcp->contact_id
            );

            $pcp_contact    = _dw_civicrm_contact_get($params);
            $pcp_user_id    = _dw_campaigns_contact_id_get_user($pcp_contact->contact_id);

            if(!is_null($pcp_user_id)) {
                $pcp_user       = user_load($pcp_user_id);

                if(!isset($pcp_user->data['displayname'])) {
                    $pcp_user->data['displayname'] = 'a';
                }

                $pcp_user->displayname  = $pcp_user->data['displayname'];
            }
        }
    }

    if(!is_null($contactID) && !empty($contactID)) {
        // look up the contact record of this user
        $params = array(
            'returnFirst'           => 1,
            'contact_id'            => $contactID
        );
        $contact = _dw_civicrm_contact_get($params);

        if(!isset($contact->postal_code)) {
            $contact->postal_code = '';
        }
    } else {
        $contact = NULL;
    }


    $homepage = variable_get('dw_campaigns_homepageurl', '');
    if(empty($homepage)) {
	$cur_host = $_SERVER['HTTP_HOST'];
        $homepage = 'http://' . $cur_host . '/dw/';
    }

    if(isset($user->data['displayname'])) {
        $user->displayname = $user->data['displayname'];
    }

    $mergeObjects['fundraising_campaign']   = $campaign;
    $mergeObjects['user']                   = $user;
    $mergeObjects['pcp']                    = $temp_pcp;
    $mergeObjects['pcp_contact']            = $pcp_contact;
    $mergeObjects['pcp_user']               = $pcp_user;
    $mergeObjects['contact']                = $contact;
    // org for global
    $mergeObjects['org']['name']                = variable_get('dw_campaigns_organization_name', 'our cause');
    $mergeObjects['org']['name_abbreviated']    = variable_get('dw_campaigns_organization_name_abbreviated', '');
    $mergeObjects['org']['homepageurl']         = $homepage;
    $mergeObjects['org']['website']             = variable_get('dw_campaigns_organization_website', '');

    return $mergeObjects;

}

/**
 * This function fixes the text in place!
 */
function dw_campaigns_do_merge(&$subject, $params) {
    fancy_merge_string($params, $subject);
}

function dw_campaigns_user_view_page($campaignId = NULL) {
    global $user;

    $res    = dw_campaigns_get_user_pcp_details($user);

    if(!empty($res['url'])) {
        drupal_goto($res['url']);
        return;
    }

    $type = dw_campaigns_get_selected_type();

    if($type == 'walking') {
        return t('You have not yet created a Fundraising Page this year. <a href="/dw/user/register_oss">click here to create one</a>');
    }

    $default_campaign_id = dw_campaigns_get_default_campaign();

    $url = '/dw/derby/start/' . $default_campaign_id;
    return t('You have not yet created a page. <a href="!url">click here to create one</a>', array('!url' => $url));
}

function dw_campaigns_user_edit_page($campaignId = NULL) {
    global $user;

    $type = dw_campaigns_get_selected_type();

    if(is_null($campaignId )) {
        if($type != 'walking') {
            $campaignId = dw_campaigns_get_default_campaign();
        } else {
            $campaignId = 'create_page';
        }
    }

    return dw_campaigns_user_create_pcp_page($campaignId);
}

function dw_campaigns_fundraising_tips_page(){
    global $user;

    $documentPath = 'sites/default/files/Fundraising_Guide.pdf';

    $html = '<a href="http://onesmallstep.fpwr.org/sites/default/files/Fundraising_Guide.pdf" download="Fundraising_Tips.pdf">Download To Your Computer</a>';
    //JFN - january 15 2014 1826 - [#feature "Select and upload a pdf to replace the currently linked document here.  but only if you're logged in as an admin"]

    if( in_array('site admin', array_values($user->roles)) ) {
        $myForm = drupal_get_form( 'dw_campaigns_upload_fundraising_tips_pdf_form_form', $documentPath );

        $html = $html . drupal_render( $myForm );
    }

    $html = $html .
            '<br>'.
            '<iframe src="http://docs.google.com/gview?url=http://onesmallstep.fpwr.org/'.$documentPath.'&embedded=true" style="width:100%; height:800px;" frameborder="0"></iframe>';

    return $html;
}

function dw_campaigns_user_donations_page($campaignId = NULL) {
    global $user;

    $campaign   = NULL;
    $type       = dw_campaigns_get_selected_type();

    if(is_null($campaignId)) {
        if($type == 'walking') {
            // if we have one, lets get fancy and look up everything for the user from this
            $pcp          = dw_campaigns_user_get_pcp_for_walking($user);

            if(is_null($pcp)) {
                drupal_set_message(t('User does not have an active Fundraising Page'), 'error');
            } else {

                if(!is_null($pcp->id)) {
                    $contribution_page_id   = $pcp->contribution_page_id;

                    $campaigns  = dw_campaigns_get_active_campaigns(TRUE);
                    $campaign   = $campaigns[$contribution_page_id];
                    $campaignId = $campaign->nid;
                }
            }
        } else {
            if(is_null($campaignId)) {
                $campaignId  = dw_campaigns_get_default_campaign();
            }
        }
    }

    if(!is_null($campaignId)) {
        $campaign = node_load($campaignId);
    }

    // used for a block on this page
    dw_campaigns_set_selected_campaign($campaign);

    $html = '<h2>Donations</h2>';
    $html .= theme('dw_campaigns_user_donations_page_theme', array('thisUser' => $user, 'campaign' => $campaign));

    return $html;
}

function dw_campaigns_user_share_page($campaignId = NULL, $user = NULL, $showEmail = TRUE) {
    if(is_null($user)) {
        global $user;
    }
    $type = dw_campaigns_get_selected_type();

    if(is_null($campaignId)) {
        if($type == 'walking') {
            // if we have one, lets get fancy and look up everything for the user from this
            $pcp          = dw_campaigns_user_get_pcp_for_walking($user);

            if(isset($pcp->id) && !is_null($pcp->id)) {
                $contribution_page_id   = $pcp->contribution_page_id;

                $campaigns  = dw_campaigns_get_active_campaigns(TRUE);
                $campaign   = $campaigns[$contribution_page_id];
                $campaignId = $campaign->nid;
            }
        } else {
            $campaignId = dw_campaigns_get_default_campaign();
        }
    }

    $campaign = node_load($campaignId);

    if(dw_campaigns_get_selected_type()!='walking') {
        $pcp = dw_campaigns_user_get_pcp_for_campaign($user, $campaign);
    } else {
        $pcp = dw_campaigns_user_get_pcp_for_walking($user);
    }

    if(!isset($pcp->id) || is_null($pcp->id)) {
        if($type == 'walking') {
            return t('You have not yet created a Fundraising Page this year. <a href="/dw/user/register_oss">click here to create one</a>');
        }

        $default_campaign_id = dw_campaigns_get_default_campaign();

        $url = '/dw/derby/start/' . $default_campaign_id;
        return t('You have not yet created a Fundraising Page this year. <a href="!url">click here to create one</a>', array('!url' => $url));
    }

    dw_campaigns_set_selected_pcp($pcp);

    //set page title
    drupal_set_title(t("Share With Friends &amp; Family"));

    $formState         = array('storage' => NULL, 'submitted' => FALSE, 'method' => 'post', 'rebuild' => FALSE, 'cache' => FALSE);


    // if this is actually a post, we need to manually copy the data into the form for the validation routine
    if(count($_POST) > 0) {
        //$form['#post'] = $_POST;
        $formState['input'] = $_POST;
    }

    //prep the form so we can render it piece by piece in the template
    $formId             = 'dw_campaigns_user_share_page_form';
    $form               = dw_campaigns_user_share_page_form(NULL, $formState, $campaign->nid);
    $form['#build_id']  = 'form-'. md5(uniqid(mt_rand(), true));


    drupal_prepare_form($formId, $form, $formState);
    drupal_process_form($formId, $form, $formState);


    $other = dw_campaigns_address_book_table($form['invitation-targets']['#default_value']);

    return theme('dw_campaigns_user_share_page_theme', array(
        'thisUser'  => $user,
        'form'      => $form,
        'campaign'  => $campaign,
        'other'     => $other,
        'showEmail' => $showEmail
    ));
}

function dw_campaigns_user_share_page_form($form, &$form_state, $campaignId) {
    global $user;

    $form = array();

    $form['invitation-from-name'] = array(
        '#type'             => 'textfield',
        '#title'            => t('Email From Name'),
        //'#description'      => t('Name to say the emails from ex: John Smith'),
        '#default_value'    => $user->data['displayname']
    );

    $campaign = node_load($campaignId);

    if(dw_campaigns_get_selected_type()!='walking') {
        $pcp = dw_campaigns_user_get_pcp_for_campaign($user, $campaign);
    } else {
        $pcp = dw_campaigns_user_get_pcp_for_walking($user);
    }

    $invitation_text = variable_get('dw-campaigns-invitation-text', '');

    $mergeObjects   = dw_campaigns_get_merge_object($campaign, $pcp->id);
    dw_campaigns_do_merge($invitation_text, $mergeObjects);


    $form['invitation-text'] = array(
        //'#type'             => 'textarea',
        '#type'             => 'text_format',
        '#format'           => '1',
        '#title'            => t('Invitation Email Text'),
        '#default_value'    => $invitation_text
    );
/*
    //emails
    $maxEmails = 3;
    for($c=0;$c<$maxEmails;$c++) {
        $form['first_name-' . $c] = array(
            '#type'         => 'textfield',
            '#title'        => t('First Name')
        );

        $form['last_name-' . $c] = array(
            '#type'         => 'textfield',
            '#title'        => t('Last Name')
        );

        $form['email-' . $c] = array(
            '#type'         => 'textfield',
            '#title'        => t('Email')
        );
    }
*/
    $form['invitation-targets'] = array(
        '#type'             => 'textarea',
        '#title'            => t('Message Recipients'),
        '#details'          => t('Enter one email per line, or use a , or ; as seperator'),
        '#description'      => t('Enter email addresses seperated by comma, semicolon, or in a list.'),
        '#default_value'    => ''
    );

    /**
     * Submit
     */
     $form['submit']    = array(
        '#type'             => 'submit',
        //'#value'            => t("Share Now"),
        '#value'            => t("Send Email"),
        '#attributes'       => array(
            'class'         => array('btn')
        )
     );

    $form['campaign-id'] = array(
        '#type'             => 'hidden',
        '#default_value'    => $campaignId
    );

    //redirect the user to their pcp page locally on the site after they are done sharing
    $form['#redirect']  = substr(dw_campaigns_user_get_pcp_url($user, $campaign), 1);

    return $form;
}

function dw_campaigns_user_share_page_form_validate(&$form, &$form_state) {

    $values = $form_state['values'];

    if(empty($values['invitation-from-name'])) {
        form_set_error('invitation-from-name', t('You must include a name that this is from'));
    }
}

function dw_campaigns_user_share_page_form_submit(&$form, &$form_state) {

    global $user;

    $values = $form_state['values'];

    $campaign = node_load($values['campaign-id']);

    if(dw_campaigns_get_selected_type()!='walking') {
        $pcp = dw_campaigns_user_get_pcp_for_campaign($user, $campaign);
    } else {
        $pcp = dw_campaigns_user_get_pcp_for_walking($user);
    }



    $invitation_text = is_array($values['invitation-text']) ? ( isset($values['invitation-text']['value']) ? $values['invitation-text']['value'] : '' ) : $values['invitation-text'];

    $mergeObjects   = dw_campaigns_get_merge_object($campaign, $pcp->id);
    dw_campaigns_do_merge($invitation_text, $mergeObjects);

    $params                      = array();
    $params['from_name']         = variable_get('dw-campaigns-invitation-text-from-email-name', 'Donation Manager');

    $from_type                   = variable_get('dw-campaigns-invitation-text-from-email-type', 'use-global-address');

    if($from_type == 'use-global-address') {
        $params['from_email']        = variable_get('dw-campaigns-invitation-text-from-email-address', 'no-reply');
    } else {
        $params['from_email']        = $user->mail;
    }

    $params['from_email'] = '"'. addslashes(mime_header_encode($params['from_name'])) .'" <'. $params['from_email'] .'>';

    $params['reply_to']              = $user->mail;

    //$params['suggested_message'] = $values['invitation-text'];
    $params['suggested_message'] = $invitation_text;




    $targets = preg_split("/[\n,;]/", $values['invitation-targets'], -1, PREG_SPLIT_NO_EMPTY);

    //skip telling friends if none were entered

    $campaign   = node_load($values['campaign-id']);
    $pcpPage    = dw_campaigns_user_get_pcp_for_campaign($user, $campaign);

    $params['source_contact_id']        = dw_campaigns_get_best_contact_id($user);
    $params['title']                    = $campaign->title;
    $params['entity_id']                = $pcpPage->id;
    $params['entity_table']             = 'civicrm_pcp';

    $params['is_test']                  = '0';

    $addresses  = dw_campaigns_get_address_book($user, $pcpPage->id, TRUE);

    $sent       = array();

    if(!is_null($params['source_contact_id'])) {
        if(1==2) {
            //send the emails using civicrms friend class
            _dw_civicrm_friend_create($params);
        } else {
            $index = 0;
            foreach($targets as $email) {

                $email  = trim($email);

                if(strlen($email) > 5 && !isset($sent[$email])) {
                    $params['invitation-from-name'] = $values['invitation-from-name'];
                    $return = drupal_mail('dw_campaigns_share', 'sharer', $email,  user_preferred_language($user), $params, $params['from_email']);
                    if(!$return['result']) {
                        array_pop($_SESSION['messages']['error']);
                        drupal_set_message(t('Unable to send email to @target_email_address', array('@target_email_address' => $email)), 'error');
                    } else {
                        if(!isset($addresses[$email])) {
                            $address_id = dw_campaigns_add_address_book($user, $email, '');
                        } else {
                            $address_id = $addresses[$email]->address_id;
                        }

                        dw_campaigns_set_address_book_status($address_id, $pcpPage->id, time());

                    }

                    $sent[$email]   = $email;
                    $index++;
                }
            }
        }
        drupal_set_message("Thank you for sharing with friends and family!");
    } else {
        drupal_set_message("Unable to determine your contact information");
    }

    $res = dw_campaigns_get_user_pcp_details($user);
    if(!empty($res['url'])) {
        //drupal_goto($res['url']);
    }
    //drupal_goto(dw_campaigns_user_get_pcp_url(false));
}

function dw_campaigns_share_mail($key, &$message, $params) {

    $language = $message['language'];

    $subject_base   =  variable_get('dw-campaigns-invitation-subject', '!email_from_name would like you to look at this fundraising campaign');

    switch($key)
    {
        case 'sharer':
            $message['body'][]               = $params['suggested_message'];
            $message['headers']['Reply-To']  = $params['reply_to'];
            $message['subject'] = t($subject_base, array('!email_from_name' => $params['invitation-from-name']));
            break;
    }
}

function dw_campaigns_user_share_page_form_submit_old(&$form, &$form_state) {

    global $user;

    $values = $form_state['values'];

    $params                      = array();
    $params['from_name']         = variable_get('dw-campaigns-invitation-text-from-email-name', 'Donation Manager');
    $params['from_email']        = variable_get('dw-campaigns-invitation-text-from-email-address', 'fake@jemeznet.com');
    $params['suggested_message'] = $values['invitation-text'];
    $params['friends']           = array();


    $index = 0;
    //loop through all friend fields and populate array in format civicrm enjoys
    while($email = $values['email-' . $index]) {
        $params['friend'][$index]['first_name']= $values['first_name-' . $index];
        $params['friend'][$index]['last_name'] = $values['last_name-' . $index];
        $params['friend'][$index]['email']     = $email;
        $index++;

    }

    //skip telling friends if none were entered
    if($index > 0) {
        //load the pcp page settings to relate these friends to the campaign
        $campaign   = node_load($values['campaign-id']);
        $pcpPage    = dw_campaigns_user_get_pcp_for_campaign($user, $campaign);

        $params['source_contact_id']        = dw_campaigns_get_best_contact_id($user);
        $params['title']                    = $campaign->title;
        $params['entity_id']                = $pcpPage->id;
        $params['entity_table']             = 'civicrm_pcp';

        $params['is_test']              = '0';

        if(!is_null($params['source_contact_id'])) {
            if(1==2) {
                //send the emails using civicrms friend class
                _dw_civicrm_friend_create($params);
            } else {
                $index = 0;
                while($email = $values['email-' . $index]) {
                    $params['index']                = $index;
                    $params['first_name']           = $values['first_name-' . $index];
                    $params['last_name']            = $values['last_name-' . $index];
                    $params['invitation-from-name'] = $values['invitation-from-name'];
                    drupal_mail('dw_campaigns_share', 'sharer', $email,  user_preferred_language($user), $params, $params['from_email']);
                    $index++;
                }
            }
            drupal_set_message("Thank you for sharing with friends and family!");
        } else {
            drupal_set_message("Unable to determine your contact information");
        }
    }


    drupal_goto(dw_campaigns_user_get_pcp_url(false));
}

function dw_campaigns_get_best_contact_id($user = NULL) {
    $source_contact_id = NULL;

    if($user->uid>0) {
        $source_contact_id      = _dw_campaigns_user_get_contact_id($user);
    } elseif(isset($_SESSION['contact_id'])) {
        $source_contact_id      = $_SESSION['contact_id'];
    }

    return $source_contact_id;
}

function dw_campaign_update_privacy($contact_id, $softcont_id, $pcp, $privacy) {
    db_query("replace into dw_campaigns_donation_privacy (civi_contact_id, soft_id, pcp, options) VALUES(:contactid, :soft_id, :pcp, :options)", array(
        ':contactid'    => $contact_id,
        ':soft_id'      => $softcont_id,
        ':pcp'          => $pcp,
        ':options'      => serialize($privacy) ));
}

// we only need the soft id
function dw_campaign_get_privacy($pcp) {
    static $results = array();

    if(!isset($results[$pcp->id])) {
        $rows = array();

        $res = db_query("select * from dw_campaigns_donation_privacy where pcp = :pcpid", array(':pcpid' => $pcp->id));

        foreach($res as $row) {
            $row                    = (array) $row;
            $columns                = unserialize($row['options']);
            $row                    = array_merge($row, $columns);
            $rows[$row['soft_id']]  = $row;
        }

        $results[$pcp->id] = $rows;
    }

    return $results[$pcp->id];
}

function dw_campaigns_format_date($in_date) {
    $time = strtotime($in_date);
    return date("M d, Y", $time);
}

function dw_campaigns_walking_distance_search_page() {
    return theme('dw_campaigns_walking_distance_search');
}

function dw_campaigns_walking_host_page() {

    $form = drupal_get_form('dw_campaigns_walking_host_page_form');
    return theme('dw_campaigns_walking_host', array('form' => $form));
}

function dw_campaigns_walking_host_page_form() {
    global $user;

    $form = array();
    $form['#attributes']    = array(
        'class'             => array('dw_campaigns-walking-host'),
        'enctype'           => "multipart/form-data"
    );

    $form['intro']          = array(
        '#type'             => 'markup',
        '#markup'           => '<h2>Host a Walk</h2>'
    );

    $form['name']	    = array(
        '#type'             => 'textfield',
        '#title'            => t('Name'),
        '#default_value'    => '',
        '#required'         => true
    );

    $form['email']	    = array(
        '#type'             => 'textfield',
        '#title'            => t('Email'),
        '#default_value'    => '',
        '#required'         => true
    );


    $form['phone']	    = array(
        '#type'             => 'textfield',
        '#title'            => t('Phone'),
        '#default_value'    => '',
        '#required'         => false
    );


    $form['city']	    = array(
        '#type'             => 'textfield',
        '#title'            => t('City'),
        '#default_value'    => '',
        '#required'         => true
    );

    $form['state']	    = array(
        '#type'             => 'textfield',
        '#title'            => t('State / Province'),
        '#default_value'    => '',
        '#required'         => true
    );

    $form['postal_code']    = array(
        '#type'             => 'textfield',
        '#title'            => t('Postal Code'),
        '#default_value'    => '',
        '#required'         => true
    );

    $form['country']        = array(
        '#type'             => 'textfield',
        '#title'            => t('Country'),
        '#default_value'    => '',
        '#required'         => true
    );

    $form['question']        = array(
        '#type'             => 'textarea',
        '#title'            => t('Message / Questions'),
        '#default_value'    => '',
    );

    $form['cancel'] = array(
        '#type'             => 'markup',
        '#markup'           => '<a onclick="location.replace(&quot;/dw/cancel/host&quot;); return false;" class="form-submit btn" value="Cancel" id="edit-cancel" name="op">' . t('Cancel') . '</a>'
    );

    $form['submit']         = array(
        '#type'             => 'submit',
        '#value'            => t('Submit'),
        '#attributes'       => array('class'=> array('btn'))
    );

    return $form;
}

function dw_campaigns_walking_host_page_form_validate(&$form, &$form_state) {

}

function dw_campaigns_walking_host_page_form_submit(&$form, &$form_state) {
    global $dw_campaign_module_path;

    $values = $form_state['values'];

    $email = variable_get('dw_campaigns_host_submit_email', '');
    if(empty($email)) {
/*
        $target = tempnam($dw_campaign_module_path . "/host_submit/", 'host_');
        file_put_contents($target, serialize($values));
*/
    } else {
        drupal_mail('dw_campaigns_host', 'host', $email, NULL, $values);
    }

    // send auto response
    drupal_mail('dw_campaigns_host', 'hoster', $values['email'], NULL, $values);

    drupal_goto('node/63');
}

function dw_campaigns_host_mail($key, &$message, $params) {
    switch($key)
    {
        case 'host':
            $subject            = 'Host Signup Form';

            $message['subject'] = $subject;

            $body               = '';
            foreach($params as $key => $value) {
                $body .= "$key  :  $value\n";
            }

            $message['body'][]  = $body;

            break;

        case 'hoster':
            $subject            = variable_get('dw_campaign_hoster_response_subject', 'Thank you for expressing interest in hosting an event');
            $body               = variable_get('dw_campaign_hoster_response_body', 'You will receive follow up communication soon.');

            $message['subject'] = $subject;
            $message['body'][]  = $body;

            break;

    }
}

function dw_campaign_get_payment_processor_list() {
    $processors     = _dw_campaigns_pseudoconstant_paymentprocessor();

    $list           = array();
    foreach($processors as $id => $label) {
        $list[$id] = $label;
    }

    return $list;
}

function dw_campaigns_user_search_dummy_form($form, &$form_state, $campaign_id) {

    $form = array();

    if(empty($campaign_id)) {
        $campaign_id = '0';
    }

    $ac_path = 'dw/ajax/campaign-member-search-autocomplete/' . $campaign_id;

    $form['query'] = array(
        '#type'              => 'textfield',
        //'#autocomplete_path' => $ac_path,
	'#default_value'     => t('Enter Walker\'s name'),
	'#attributes'	     => array('class' => array('search', 'has-default-text', 'has-focus'))
    );


    $form['submit']         = array(
        '#type'             => 'submit',
        '#value'            => t('Find'),
        '#attributes'       => array('class'=> array('btn', 'small-go'))
    );
    return $form;

}

function dw_campaigns_clear_cache() {
    global $dw_campaign_module_path;

    drupal_set_message('Cleared civi REST cache');

    $path = $dw_campaign_module_path . '/civi_cache/*';
    $files = glob($path);
    foreach($files as $file) {
        unlink($file);
    }

    drupal_goto('dw/');
}

function dw_campaigns_lang($lang = 'en') {
    global $language;

    $parts = explode('/', $_GET['q'], 4);
    $languages = language_list();
    $language = isset($languages[$lang]) ? $languages[$lang] : $language;

    $_SESSION['language'] = $language;

    $targ = isset($parts[3]) ? $parts[3] : '/';
    drupal_goto($targ);
}

function dw_campaign_get_max_intro() {
    return variable_get('dw_campaign_max_intro_text_chars', 500);
}

function dw_campaigns_notfound() {

    $in_dest    = $_GET['destination'];
    $in_dest    = str_replace('-', ' ', $in_dest);
    $parts      = explode("/", $in_dest);

    if(count($parts)==2) {
        $search = $parts[1] . ', ' . $parts[0];

        $result = db_query("select * from field_data_field_dw_campaign_location where field_dw_campaign_location_value = :search order by entity_id desc", array(':search' => $search));
	$row    = $result->fetchObject();

        if(!$row) {
            return 'scanned, page not found';
        }

        // drupal_goto seems to not like it when you're on a 404 page
        $dest = sprintf("http://%s/dw/walking/location/%s", $_SERVER['HTTP_HOST'], $row->entity_id);
        header("location: $dest");
        die;

    } else {
        return 'page not found';
    }
    return;
}

function dw_campaigns_get_youtube($raw_vid) {

    $vid            = '';

    $raw_vid        = str_replace('youtu.be', 'youtube.com/watch?v=', $raw_vid);
    $count          = preg_match('/v=(.*)/', $raw_vid, $matches);

    if($count > 0) {
        $parts = explode('&', $matches[1]);
        if(isset($parts[0])) {
            $vid = $parts[0];
        }
    }

    return $vid;
}

function dw_campaigns_all_currencies() {
    global $accepted_currencies;

    if(is_array($accepted_currencies)) {

        $return = $accepted_currencies;

    } else {
        $return = array(
            'USD' => 'USD',
            'USD' => 'USD',
            'GBP' => 'GBP',
            'EUR' => 'EUR',
            'AUD' => 'AUD',
            'CAD' => 'CAD',
            //'NZD' => 'NZD',
    	    'MULTI' => 'MULTI',
        );
    }

    return $return;
}

function dw_campaigns_user_donations_add_page($campaignId = NULL) {
    global $user;

//return "donations are currently disabled";
    $type = dw_campaigns_get_selected_type();

    if(is_null($campaignId)) {
        if($type == 'walking') {
            // if we have one, lets get fancy and look up everything for the user from this
            $pcp          = dw_campaigns_user_get_pcp_for_walking($user);

            if(!is_null($pcp->id)) {
                $contribution_page_id   = $pcp->contribution_page_id;

                $campaigns  = dw_campaigns_get_active_campaigns(TRUE);
                $campaign   = $campaigns[$contribution_page_id];
                $campaignId = $campaign->nid;
            }
        }

        if(is_null($campaignId)) {
            $campaignId  = dw_campaigns_get_default_campaign();
        }
    }
    $campaign = node_load($campaignId);

    $form = drupal_get_form('dw_campaigns_user_donations_add_form', $campaign, $pcp);
// NOTE - campaign and pcp dont seem to be used by this theme..
    return theme('dw_campaigns_user_donations_add_theme', array('form' => $form, 'campaign' => $campaign, 'pcp' => $pcp));
}

function dw_campaigns_user_donations_add_form($form, &$form_state, $campaign, $pcp) {
    $form = array();
    $form['#attributes']    = array(
        'class'             => array('dw_campaigns-profile-form'),
        'enctype'           => "multipart/form-data"
    );


//ZEBRA

    $currency = ' (' . $campaign->field_dw_currency['und']['0']['value'] . ')';
    if($currency == ' (USD)') {
        $currency   = '';
    }

    if($currency == ' (MULTI)') {
        $currency   = '';
        $multi      = TRUE;
    }

    $form['donation-amount'] = array(
        '#type'             => 'textfield',
        '#title'            => t('Donation Amount') . ' ' . $currency,
        '#default_value'    => variable_get('default_contribution_amount', '100.00')
    );



    if($multi) {
	$currencies = dw_campaigns_all_currencies();

        if(isset($currencies['MULTI'])) {
            unset($currencies['MULTI']);
        }

        $form['donation-currency'] = array(
            '#type'         => 'select',
            '#title'        => t('Currency'),
            '#options'      => $currencies
        );
    }

    $address_form   = dw_campaigns_address_form_fields(NULL);

    $form           = array_merge($form, $address_form);


    unset($form['address_1']['#required']);
    unset($form['address_2']['#required']);
    unset($form['city']['#required']);
    unset($form['postal_code']['#required']);
    unset($form['email']['#required']);

    $form['address_1']['#prefix']   = '<div class="terse-hide">';
    $form['address_2']['#prefix']   = '<div class="terse-hide">';
    $form['city']['#prefix']        = '<div class="terse-hide">';
    $form['postal_code']['#prefix'] = '<div class="terse-hide">';
    $form['state']['#title']        = 'State / Province';
    $form['address_1']['#suffix']   = '</div>';
    $form['address_2']['#suffix']   = '</div>';
    $form['city']['#suffix']        = '</div>';
    $form['postal_code']['#suffix'] = '</div>';

    unset($form['address_2']);


    $form['payment_instrument'] = array(
        '#type'             => 'select',
        '#title'            => t('Payment Instrument'),
        '#options'          => array('check' => 'Check', 'cash' => 'Cash'),
        '#prefix'           => '<div style="float:left;">',
        '#suffix'           => '</div>'
    );

    $form['payment_check_number'] = array(
        '#type'             => 'textfield',
        '#title'            => t('Check Number'),
    );


    $form['include_in_honor_roll'] = array(
        '#type'             => 'checkbox',
        '#title'            => t('Show First and Last name on donation list (will show anonymous otherwise)'),
        '#default_value'    => 1,
    );

    $form['submit-fieldset']['submit'] = array(
        '#type'             => 'submit',
        '#value'            => 'Donate Now',
        '#attributes'       => array('class' => array('btn', 'confirm-amount'))
    );


    $form['campaign'] = array(
        '#type'             => 'hidden',
        '#default_value'    => $campaign->nid
    );

    $form['pcpId'] = array(
        '#type'             => 'hidden',
        '#default_value'    => $pcp->id
    );

    return $form;
}

function dw_campaigns_user_donations_add_form_validate(&$form, &$form_state) {

    $form_state['values']['donation-amount'] = preg_replace("/[^0-9\.]/", '', $form_state['values']['donation-amount']);

    $values             = $form_state['values'];

    $campaign           = node_load($values['campaign']);

    // $campaign is the drupal node, not an id
    $contributionType   = dw_campaigns_create_contribution_type_for_campaign($campaign);
    $contributionPage   = dw_campaigns_get_contribution_page_for_campaign($campaign);

    $countries_longname = _dw_civicrm_pseudoconstant_country();
    // turn country 'id' 1228 (united states) into 'US'
    $countries          = _dw_civicrm_pseudoconstant_countryIsoCode();
    $countryID          = $values['country'];
    $country_iso_code   = isset($countries[$countryID])?$countries[$countryID]:'';

    $states             = _dw_civicrm_pseudoconstant_stateprovince();
    $state              = isset($states[$values['state']])?$states[$values['state']]:'';

    $currency           = $contributionPage->currency;

    $multi = FALSE;

    if($campaign->field_dw_currency['und']['0']['value'] == 'MULTI') {
        $multi = TRUE;
    }

    // this is not yet working LOOK
    if($multi) {
        global $currency_processor;

        $picked_currency = $values['donation-currency'];
        if(!isset($currency_processor[$picked_currency])) {
            form_set_error('', t('Invalid Currency') . $picked_currency);
            return;
        }
        $currency    = $picked_currency;
    }

    if(empty($currency)) {
        form_set_error('','Currency unknown');
        return;
    }

    $remote_addr        = $_SERVER['REMOTE_ADDR'];
    if($remote_addr == '::1') {
        $remote_addr    = '127.0.0.1';
    }

    if($values['payment_instrument'] == 'check') {
        if(strlen($values['payment_check_number'] < 2)) {
            form_set_error('payment_check_number','Must include check number for checks');
            return;
        }
    }

    if($values['donation-amount'] <= 0) {
            form_set_error('donation-amount','Must be a value > 0.00');
            return;
    }

    if(isset($_SESSION['messages']['error']) && count($_SESSION['messages']['error']) > 0) {
        form_set_error('', 'Please fix errors and try again');
        return;
    }

    // we NEVER reject an offline donation if the fields are supplied, so generate an invoice id (this still needs a serial)
    $invoice_id         = dw_campaigns_invoice_generate_id($currency);

    $invoice_serial     = dw_campaigns_invoice_generate_serial($currency);
    $invoice_id         .= '-' . $invoice_serial;

    $form_state['values']['invoice_serial'] = $invoice_serial;

    // we do all the customer creation now to be like a real donation, on a normal donation we don't know if we should accept it or not until the validate step tries to bill the card, but we need a contact to do that, so we build the contact here...

    if(empty($values['email'])) {
	$temp_mail       = variable_get('site_mail', '@templatesandbox.com');
	$parts           = explode('@', $temp_mail);
	$base_email      = isset($parts[1]) ? $parts[1] : 'templatesandbox.com';

        $email           = sprintf("od-%s-%s@%s", time(), $values['pcpId'], $base_email);
	$values['email'] = $email;
	//drupal_set_message('assigned anonymous email adddress ' . $email);
    }

    $params['amount']                           = $values['donation-amount'];
    $params['amount_other']                     = $values['donation-amount'];
    $params['custom_1']                         = '';
    $params['ip']                               = $remote_addr;
    $params['ip_address']                       = $remote_addr;
    $params['amount_level']                     = '';
    $params['currencyID']                       = $currency;
    $params['payment_action']                   = 'Sale';
    $params['invoiceID']                        = $invoice_id;
    $params['is_pay_later']                     = 1;
    $params['is_recur']                         = '';
    $params['first_name']                       = $values['first_name'];
    $params['middle_name']                      = '';
    $params['last_name']                        = $values['last_name'];
    $params['email']                            = $values['email'];
    $params['street_address']                   = $values['address_1'];
    $params['city']                             = $values['city'];
    $params['state_province']                   = $state;
    $params['postal_code']                      = $values['postal_code'];
    $params['country']                          = $country_iso_code;

// home address
    $params['email-1']                          = $values['email'];
    $params['street_address-1']                 = $values['address_1'];
    $params['city-1']                           = $values['city'];
    $params['state_province-1']                 = $state;
    $params['postal_code-1']                    = $values['postal_code'];
    $params['country-1']                        = $country_iso_code;

// billing address
    $params['email-5']                          = $values['email'];
    $params['street_address-5']                 = $values['address_1'];
    $params['city-5']                           = $values['city'];
    $params['state_province-5']                 = $state;
    $params['postal_code-5']                    = $values['postal_code'];
    $params['country-5']                        = $country_iso_code;

    $params['contributionType_name']            = $contributionType->name;
    $params['contributionType_accounting_code'] = $contributionType->accounting_code;
    $params['contributionPageID']               = $contributionPage->id;

    /* since we are using the REST API we need to pass it the fields we want to dedupe on */
    foreach($params as $key => $value) {
        $dedupe['fields_' . $key] = $value;
    }

    $dedupe = array_merge($dedupe, $params);
    $contactID = _dw_campaigns_dwutils_get_deduped_contact_id($dedupe);

    // save this for the rest of the session
    $_SESSION['contact_id'] = $contactID;

    // add in some fields we learn of now, so submit can use them
    $form_state['values']['contact_id'] = $contactID;
    $form_state['values']['invoice_id'] = $invoice_id;

}

function dw_campaigns_user_donations_add_form_submit(&$form, &$form_state) {
    global $user;
    global $dw_campaign_module_path;


    // this is where we do the last logic - create the contribution
    $values             = $form_state['values'];
    $campaign           = node_load($values['campaign']);

    // $campaign is the drupal node, not an id
    $contributionType   = dw_campaigns_create_contribution_type_for_campaign($campaign);
    $contributionPage   = dw_campaigns_get_contribution_page_for_campaign($campaign);

    // use the supplied display name OR do this if none is supplied
    $nickname           = ucfirst($values['first_name']) . ' ' . ucfirst($values['last_name']);
    if(!empty($values['displayname'])) {
        $nickname       = $values['displayname'];
    }

    $params                             = array();
    $params['contact_id']               = $values['contact_id'];
    $params['contribution_page_id']     = $contributionPage->id;
    $params['contribution_type_id']     = $contributionType->id;
    //$params['contribution_status_id']   = 1; // 1 = completed 2 = pending 3 = failed

    $params['contribution_status_id']   = 2;
    $params['payment_instrument_id']    = 1;
    $params['pcp_made_through_id']      = $values['pcpId'];
    $params['pcp_id']                   = $values['pcpId'];
    $params['pcp_display_in_roll']      = $values['include_in_honor_roll'];

    $params['currency']                 = $contributionPage->currency;

    if(isset($values['donation-currency'])) {
        $params['currency']             = $values['donation-currency'];
    }

    $params['pcp_roll_nickname']        = $nickname;
    $params['pcp_personal_note']        = $values['contribution_comments'];
    $params['receive_date']             = date('Y-m-d H:i:s');
    $params['total_amount']             = $values['donation-amount'];
    $params['amount']                   = $values['donation-amount'];
    $params['invoice_id']               = $values['invoice_id'];
    $params['trxn_id']                  = $values['trxn_id'];
    $params['source']                   = "DW Campaigns Module (manual add)";
    $params['is_pay_later']             = 1;

    if($values['payment_instrument'] == 'check') {
        $params['payment_instrument_id'] = 4;
        $params['check_number']          = $values['payment_check_number'];
    }




    $contribution = _dw_civicrm_contribution_create($params);
    if(is_null($contribution->id)) {
        // todo - raise some sort of an error
        drupal_set_message(t('An unknown error occured while creating contribution.  Contact Support with ID: INV-') . $values['invoice_id']);
        @mkdir($dw_campaign_module_path . "/failed_invoices/");
        file_put_contents($dw_campaign_module_path . "/failed_invoices/" . $values['invoice_id'], serialize($params));
    }



    $params['contribution_id']  = $contribution->id;

    dw_campaigns_invoice_update_receipt($params['currency'], $values['invoice_serial'], $params['contribution_id']);

    $softContribution           = _dw_civicrm_contributionsoft_create($params);
    $softcont_id                = $softContribution->id;

    $_SESSION['contribution']       = $contribution;
    $_SESSION['softContribution']   = $softContribution;

    drupal_set_message("Offline Contribution Added");

    echo '<p>Donation has been recorded.. reloading donations list</p><script language="javascript" type="text/javascript"> parent.location.reload(); </script>';
    die;
}

//JFN - january 31 2014 1441 - [#dev "upload fundraising tips pdf functionality"]
function dw_campaigns_upload_fundraising_tips_pdf_form_form( $form, &$form_state){
    //$form_state['build_info']['args'][0] = 'sites/default/files/Fundraising_Guide.pdf';
    $documentPath = $form_state['build_info']['args'][0];

    $form['pdf'] = array(
        '#name' => 'files[tmp_pdf]',
        '#type' => 'file',
        '#title' => 'upload new guide',

    );

    $form['document_path'] = array(
        '#type' => 'hidden',
        '#value' => $documentPath
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Upload New Fundraising Guide'
    );

    $form['#attributes'] = array('class' => 'admin-upload-form-form');

    return $form;

}

function dw_campaigns_upload_fundraising_tips_pdf_form_form_validate( $form, &$form_state){
    $file = file_save_upload('tmp_pdf', array());

    $file->filename = basename($form['document_path']['#value']);

    file_move($file, 'public://'.$file->filename, FILE_EXISTS_REPLACE);

}

function dw_campaigns_upload_fundraising_tips_pdf_form_submit( $form, &$form_state){

}

//JFN - january 16 2014 0035 - [#dev "offline-donations-form upload functionality"]
function dw_campaigns_upload_offline_form_form( $form, &$form_state ){
    $documentPath = $form_state['build_info']['args'][0];

    $form['pdf'] = array(
        '#type' => 'file'
    );

    $form['document_path'] = array(
        '#type' => 'hidden',
        '#value' => $documentPath
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Upload New Form'
    );

    $form['#attributes'] = array('class' => 'admin-upload-form-form');

    return $form;

}

function dw_campaigns_upload_offline_form_form_validate( $form, &$form_state ){
    //var_dump( $form['pdf'] );exit;

    $file = file_save_upload('pdf', array());

    $file->filename = basename($form['document_path']['#value']);

    file_move($file, 'public://donation_forms/'.$file->filename, FILE_EXISTS_REPLACE);

}

function dw_campaigns_upload_offline_form_form_submit( $form, &$form_state ){

}

function dw_campaigns_invoice_generate_id($currency = 'USD') {
    $invoice_id = md5(uniqid(rand(), true));
    $invoice_id.= '-' . $currency;

    return $invoice_id;
}

function dw_campaigns_invoice_generate_serial($currency = 'USD', $tax_receipt_sent = 0) {
    $table = sprintf("dw_campaigns_contribution_receipts_%s", $currency);
    if(!db_table_exists($table)) {

        db_query(
            "CREATE TABLE {$table} (
            `rid` INT UNSIGNED NOT NULL AUTO_INCREMENT ,
            `contribution_id` INT NOT NULL DEFAULT -1,
            `tax_receipt_sent` INT NOT NULL DEFAULT '0',
            PRIMARY KEY ( `rid` )
            ) auto_increment=1000;
            "
        );

    }


    $last_id = db_insert($table)->fields(array('contribution_id' => -1, 'tax_receipt_sent' => $tax_receipt_sent))->execute();

    return $last_id;
}

function dw_campaigns_invoice_update_receipt($currency, $invoice_id, $contribution_id) {
    $table = sprintf("dw_campaigns_contribution_receipts_%s", $currency);

    db_query("update {$table} set contribution_id = :contributionid where rid = :rid", array(
        ':contributionid'   => $contribution_id,
        ':rid'              => $invoice_id));
}

function dw_campaigns_invoice_update_receipt_email($currency, $invoice_id) {
    $table = sprintf("dw_campaigns_contribution_receipts_%s", $currency);
    db_query("update {$table} set tax_receipt_sent = :sent where rid=:rid", array(':sent' => 1, ':rid' => $invoice_id));
    file_put_contents("/tmp/cdn_out", "$currency $invoice_id\n", FILE_APPEND);
}

function dw_campaigns_invoice_get_receipt_email_status_by_contribution_id($currency, $contribution_id) {
    if(is_null($currency)  || empty($currency)) {
        return TRUE; // this is invalid
    }

    $table     = sprintf("dw_campaigns_contribution_receipts_%s", $currency);

    $result    = db_query("select tax_receipt_sent from {$table} where contribution_id = :contributionid", array('contributionid' => $contribution_id));

    if($result->rowCount() == 0 ) {
        return FALSE;
    }

    $row = $result->fetchObject();

    if($row->tax_receipt_sent >= 1) {
        return TRUE;
    }

    return FALSE;
}

function dw_campaigns_invoice_sync_with_contributions($currency = 'USD', $contribution_id = NULL, $rid = NULL) {

    static $invoices = NULL;

    if(is_null($contribution_id)) {
        echo "Invalid lookup<br>";
        return;
    }

    if(is_null($invoices[$currency])) {
        echo "loading ($currency)<br>";
        $t_invoices = array();
        $table  = sprintf("dw_campaigns_contribution_receipts_%s", $currency);


        $res    = db_query("select * from {$table}");
        foreach($res as $row) {
            $t_invoices[$row['rid']] = $row;
        }
        $invoices[$currency] = $t_invoices;
    }

    if(is_null($rid) || $rid == '') {
        foreach($invoices[$currency] as $row_rid => $row) {
            if($row['contribution_id'] == $contribution_id) {
                echo "We found $row_rid for $contribution_id but NULL rid was supplied<br>";
                return;
            }
        }

        echo "Generating new invoice for contribution $contribution_id ($currency)<br>";
        $contribution           = dw_campaigns_get_contribution_by_id($contribution_id);

        $params                 = (array)$contribution;
        $params['id']           = $params['contribution_id'];
        $parts                  = explode('-', $params['invoice_id']);
        $params['invoice_id']   = $parts[0]; // set it short, then we will use the same code we use elsewhere

        $invoice_id             = $params['invoice_id'];
        $invoice_serial         = dw_campaigns_invoice_generate_serial($params['currency']);
        $invoice_id             .= '-' . $currency . '-' . $invoice_serial;
        $params['invoice_id']   = $invoice_id;

        $new_contribution = _dw_civicrm_contribution_create($params);
        dw_campaigns_invoice_update_receipt($currency, $invoice_serial, $contribution_id);
    } else {
        if(!isset($invoices[$currency][$rid])) {
            echo "Could not find record for rid $rid ($currency)<br>";
            die;
        } else {
            if($contribution_id != $invoices[$currency][$rid]['contribution_id']) {
                if($invoices[$currency][$rid]['contribution_id'] == -1) {
                    echo "NO RID (-1) for contribution $contribution_id (should be $rid) in dw_campaigns_contribution_receipts_$currency<br>";
                    dw_campaigns_invoice_update_receipt($currency, $rid, $contribution_id);
                } else {
                    echo "Mismatch ($currency) $contribution_id != {$invoices[$currency][$rid]['contribution_id']}<br>";
                    die;
                }
            }
            return $contribution_id;
        }
    }
}

function dw_campaigns_preprocess(&$variables, $hook) {

}

function dw_campaigns_contact_importer_contacts_alter(&$list, $imported) {
    global $user;

    $pcp = dw_campaigns_user_get_pcp_for_walking($user);

// $imported is the list of all items
// $list is the list of checked items
// we want to import all their checked items but need the name field too


    foreach($imported as $import) {

        $email = $import['email'];

        if(isset($list[$email])) {
            $name = $import['name'];
            $name = trim($name, " \t\n\r\0\x0b)(");

            dw_campaigns_add_address_book($user, $email, $name);
        }
    }

}