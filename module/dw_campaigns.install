<?php
        
global $dw_campaign_module_path;

function dw_campaigns_install() {

}

/**
* Sets default values for theme blocks,
* adds flickr integration fields to campaign
**/
function dw_campaigns_update_7001() {
    dw_campaigns_add_flickr_fields();   
    

}

function dw_campaigns_add_flickr_fields() {
    $field_name = 'flickr_gallery_id';

    if (!field_info_field($field_name)) {

        $field = array(
            'field_name' => $field_name,
            'type' => 'text',
            'settings' => array( 'max_length' => 254),
        );

        field_create_field($field);

        $instance = array( 'field_name' => $field_name,
            'entity_type' => 'node',
            'bundle' => 'dw_campaigns_derby',
            'label' => 'Flicker Gallery Id',
            'description' => 'Id of Flicker Gallery',
            'required' => false,
        );

        field_create_instance($instance);
        watchdog('dw_campaigns', t('added fields for :field_name', array(':field_name' => $field_name)));
    }

    $field_name = 'flickr_gallery_photoset_id';

    if (!field_info_field($field_name)) {

        $field = array(
            'field_name' => $field_name,
            'type' => 'text',
            'settings' => array( 'max_length' => 254),
        );

        field_create_field($field);

        $instance = array( 'field_name' => $field_name,
            'entity_type' => 'node',
            'bundle' => 'dw_campaigns_derby',
            'label' => 'Flicker Gallery Photo Set Id',
            'description' => 'Id of Flicker Gallery photo set to show',
            'required' => false,
        );

        field_create_instance($instance);
        watchdog('dw_campaigns', t('added fields for :field_name', array(':field_name' => $field_name)));
    }

}

// FIXME - this doesn't work, find a better solution
function dw_campaigns_set_block_default_pages() {
    global $dw_campaign_module_path;

    $file = $dw_campaign_module_path . '/dw_campaigns_default_block.json';

    $blocks = json_decode(file_get_contents($file));

    foreach($blocks as $block) {

        $block->module = 'dw_campaigns';
var_dump($block);
continue;
        $result = db_select('block','block')
                    ->fields('block')
                    ->condition('module', $block->module)
                    ->condition('delta',  $block->delta)
                    ->condition('theme',  $block->theme)
                    ->execute();

        if($result->rowCount() == 0) {

            db_insert('block')->fields((array)$block)
              ->execute();

        } else {

            db_update('block')->fields((array)$block)
              ->condition('module', $block->module)
              ->condition('delta', $block->delta)
              ->condition('theme',  $block->theme)
              ->execute();
        }
    }

    $file = $dw_campaign_module_path . '/dw_campaigns_default_block_class.json';

    $blocks = json_decode(file_get_contents($file));

    foreach($blocks as $block) {

        $block->module = 'dw_campaigns';

        $result = db_select('block_class', 'block')
                    ->fields('block')
                    ->condition('module', $block->module)
                    ->condition('delta',  $block->delta)
                    ->execute();

        if($result->rowCount() == 0) {

            db_insert('block_class')->fields((array)$block)
              ->execute();

        } else {

            db_update('block_class')->fields((array)$block)
              ->condition('module', $block->module)
              ->condition('delta', $block->delta)
              ->execute();
        }
    }


}

/*
function dw_campaigns_install() {
	dw_campaigns_try_adding_derby();
}

function dw_campaigns_uninstall() {
	drupal_uninstall_schema('dw_campaigns');
}

function dw_campaigns_try_adding_derby() {
        global $dw_campaign_module_path;

	$types = array();
	$type_result = db_query('SELECT * FROM {node_type} WHERE type like "dw_campaign_%"');
	while ($type = db_fetch_array($type_result)) {
		$types[$type['type']] = $type;
	}
	
	if(!isset($types['dw_campaigns_derby'])) {
		drupal_set_message('Added Derby Content Type', 'status');

		install_include(array('content', 'content_copy'));
		$file = $dw_campaign_module_path . '/content_type-dw_campaign_derby.txt';
		install_content_copy_import_from_file($file, '');
	} else {
		drupal_set_message('Skipped Adding Derby Content Type', 'status');
	}
	
	drupal_set_message('Installed DW Campaigns Schema', 'status');
	drupal_install_schema('dw_campaigns');
}

function dw_campaigns_update_2() {
	dw_campaigns_try_adding_derby();
}



function dw_campaigns_schema() {

    $schema['dw_campaigns_uploaded_photos'] = array(
        'fields' => array(
            'fid'                       => array('type' => 'int',       'not null' => TRUE),
            'filepath'                  => array('type' => 'varchar',   'length' => 127, 'not null' => TRUE),
            'owner'                     => array('type' => 'int',       'not null' => TRUE),
            'for_nid'                   => array('type' => 'int',       'not null' => TRUE),
            'status'                    => array('type' => 'char',      'length' => 1, 'not null' => TRUE),
        ),
        'primary key' => array('fid'),
    );

    $schema['dw_campaigns_photos_mapping'] = array(
        'fields' => array(
            'fid'                       => array('type' => 'int',       'not null' => TRUE),
            'type'                      => array('type' => 'varchar',   'length' => 127, 'not null' => TRUE),
            'resource_id'               => array('type' => 'int',       'not null' => TRUE),
        ),
        'unique key' => array('fid', 'type'),
    );
    
    $schema['dw_campaigns_campaigns_to_contribution_pages'] = array(
        'fields' => array(
            'nid'			=> array('type' => 'int',   'not null' => TRUE),
            'contribution_page_id'	=> array('type' => 'int',   'not null' => TRUE),
            'event_page_id'		=> array('type' => 'int',   'not null' => TRUE),
        ),
        'primary key' => array('nid','contribution_page_id')
    );
    
    
    $schema['dw_campaigns_drupal_civi_contact_mapping'] = array(
        'fields' => array(
            'mapping_id'                => array('type' => 'serial',    'not null' => TRUE),
            'drupal_id'                 => array('type' => 'int',       'not null' => TRUE),
            'civi_contact_id'           => array('type' => 'int',       'not null' => TRUE),
        ),
        'primary key' => array('mapping_id'),
    );

    $schema['dw_campaigns_donation_privacy'] = array(
        'fields' => array(
            'privacy_id'                => array('type' => 'serial',    'not null' => TRUE),
            'civi_contact_id'           => array('type' => 'int',       'not null' => TRUE),
            'soft_id'                   => array('type' => 'int',       'not null' => TRUE),
            'pcp'	                => array('type' => 'int',       'not null' => TRUE),
            'options'                   => array('type' => 'text',      'not null' => TRUE),        
        ),
        'primary key' => array('mapping_id'),
    );
    
    $schema['dw_campaigns_user_notify_settings'] = array(
	'fields'	=> array(
            'drupal_id'                                 => array('type' => 'int',	'length' => 10, 'not null' => TRUE),
            'notify_on_donation'                        => array('type' => 'int',	'length' => 1, 'not null' => TRUE),
            'notify_on_donation_additional_emails'      => array('type' => 'text',	'not null' => TRUE),
            'notify_weekly_report'                      => array('type' => 'int',	'length' => 1, 'not null' => TRUE),
            'notify_campaign_progress'                  => array('type' => 'int',	'length' => 1, 'not null' => TRUE),
	),
	'unique keys' => array('drupal_id'),
    );
    
    return $schema;
}
*/
